"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetSystemState = exports.getSystemState = exports.getReportsState = exports.getNetworkState = exports.getManagingState = exports.getGraphState = exports.getClientsState = exports.getClient = exports.getAgentsState = exports.getAgent = void 0;
var _module = require("../module");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var resetSystemState = function resetSystemState() {
  (0, _module.resetAgentsReportsState)();
  (0, _module.resetAgentsState)();
  (0, _module.resetGraphState)();
  (0, _module.resetClientsReportsState)();
  (0, _module.resetClientsState)();
  (0, _module.resetManagingSystemState)();
  (0, _module.resetNetworkReportsState)();
  (0, _module.resetNetworkState)();
  (0, _module.resetSimulationState)();
};
exports.resetSystemState = resetSystemState;
var getSystemState = function getSystemState() {
  return {
    systemStartTime: _module.SIMULATION_STATE.systemStartTime,
    secondsPerHour: _module.SIMULATION_STATE.systemStartTime,
    network: _objectSpread({}, _module.NETWORK_STATE),
    agents: _objectSpread(_objectSpread({}, _module.CLIENTS_STATE), _module.AGENTS_STATE),
    managingSystem: _objectSpread({}, _module.MANAGING_SYSTEM_STATE),
    graph: _objectSpread({}, _module.GRAPH_STATE)
  };
};
exports.getSystemState = getSystemState;
var getAgentsState = function getAgentsState() {
  return _objectSpread(_objectSpread({}, _module.AGENTS_STATE), {}, {
    graph: _objectSpread({}, _module.GRAPH_STATE)
  });
};
exports.getAgentsState = getAgentsState;
var getGraphState = function getGraphState() {
  return _objectSpread({}, _module.GRAPH_STATE);
};
exports.getGraphState = getGraphState;
var getClientsState = function getClientsState() {
  return {
    clients: _module.CLIENTS_STATE.clients.map(function (client) {
      return {
        name: client.name,
        status: client.status,
        isSplit: client.isSplit
      };
    })
  };
};
exports.getClientsState = getClientsState;
var getClient = function getClient(clientName) {
  var _CLIENTS_STATE$client;
  return (_CLIENTS_STATE$client = _module.CLIENTS_STATE.clients.filter(function (client) {
    return client.name.toUpperCase() === clientName.toUpperCase();
  })[0]) !== null && _CLIENTS_STATE$client !== void 0 ? _CLIENTS_STATE$client : null;
};
exports.getClient = getClient;
var getAgent = function getAgent(agentName) {
  var _AGENTS_STATE$agents$;
  return (_AGENTS_STATE$agents$ = _module.AGENTS_STATE.agents.filter(function (agent) {
    return agent.name.toUpperCase() === agentName.toUpperCase();
  })[0]) !== null && _AGENTS_STATE$agents$ !== void 0 ? _AGENTS_STATE$agents$ : null;
};
exports.getAgent = getAgent;
var getManagingState = function getManagingState() {
  return {
    managing: _objectSpread({}, _module.MANAGING_SYSTEM_STATE)
  };
};
exports.getManagingState = getManagingState;
var getNetworkState = function getNetworkState() {
  return {
    network: _objectSpread({}, _module.NETWORK_STATE),
    simulation: _objectSpread({}, _module.SIMULATION_STATE)
  };
};
exports.getNetworkState = getNetworkState;
var getReportsState = function getReportsState() {
  return _objectSpread(_objectSpread(_objectSpread({}, _module.NETWORK_REPORTS_STATE), _module.CLIENTS_REPORTS_STATE), _module.AGENTS_REPORTS_STATE);
};
exports.getReportsState = getReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9kdWxlIiwicmVxdWlyZSIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJyZXNldFN5c3RlbVN0YXRlIiwicmVzZXRBZ2VudHNSZXBvcnRzU3RhdGUiLCJyZXNldEFnZW50c1N0YXRlIiwicmVzZXRHcmFwaFN0YXRlIiwicmVzZXRDbGllbnRzUmVwb3J0c1N0YXRlIiwicmVzZXRDbGllbnRzU3RhdGUiLCJyZXNldE1hbmFnaW5nU3lzdGVtU3RhdGUiLCJyZXNldE5ldHdvcmtSZXBvcnRzU3RhdGUiLCJyZXNldE5ldHdvcmtTdGF0ZSIsInJlc2V0U2ltdWxhdGlvblN0YXRlIiwiZXhwb3J0cyIsImdldFN5c3RlbVN0YXRlIiwic3lzdGVtU3RhcnRUaW1lIiwiU0lNVUxBVElPTl9TVEFURSIsInNlY29uZHNQZXJIb3VyIiwibmV0d29yayIsIk5FVFdPUktfU1RBVEUiLCJhZ2VudHMiLCJDTElFTlRTX1NUQVRFIiwiQUdFTlRTX1NUQVRFIiwibWFuYWdpbmdTeXN0ZW0iLCJNQU5BR0lOR19TWVNURU1fU1RBVEUiLCJncmFwaCIsIkdSQVBIX1NUQVRFIiwiZ2V0QWdlbnRzU3RhdGUiLCJnZXRHcmFwaFN0YXRlIiwiZ2V0Q2xpZW50c1N0YXRlIiwiY2xpZW50cyIsIm1hcCIsImNsaWVudCIsIm5hbWUiLCJzdGF0dXMiLCJpc1NwbGl0IiwiZ2V0Q2xpZW50IiwiY2xpZW50TmFtZSIsIl9DTElFTlRTX1NUQVRFJGNsaWVudCIsInRvVXBwZXJDYXNlIiwiZ2V0QWdlbnQiLCJhZ2VudE5hbWUiLCJfQUdFTlRTX1NUQVRFJGFnZW50cyQiLCJhZ2VudCIsImdldE1hbmFnaW5nU3RhdGUiLCJtYW5hZ2luZyIsImdldE5ldHdvcmtTdGF0ZSIsInNpbXVsYXRpb24iLCJnZXRSZXBvcnRzU3RhdGUiLCJORVRXT1JLX1JFUE9SVFNfU1RBVEUiLCJDTElFTlRTX1JFUE9SVFNfU1RBVEUiLCJBR0VOVFNfUkVQT1JUU19TVEFURSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zdGF0ZS11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQUdFTlRTX1JFUE9SVFNfU1RBVEUsXHJcbiAgICBBR0VOVFNfU1RBVEUsXHJcbiAgICBDTElFTlRTX1JFUE9SVFNfU1RBVEUsXHJcbiAgICBDTElFTlRTX1NUQVRFLFxyXG4gICAgR1JBUEhfU1RBVEUsXHJcbiAgICBNQU5BR0lOR19TWVNURU1fU1RBVEUsXHJcbiAgICBORVRXT1JLX1JFUE9SVFNfU1RBVEUsXHJcbiAgICBORVRXT1JLX1NUQVRFLFxyXG4gICAgcmVzZXRBZ2VudHNSZXBvcnRzU3RhdGUsXHJcbiAgICByZXNldEFnZW50c1N0YXRlLFxyXG4gICAgcmVzZXRDbGllbnRzUmVwb3J0c1N0YXRlLFxyXG4gICAgcmVzZXRDbGllbnRzU3RhdGUsXHJcbiAgICByZXNldEdyYXBoU3RhdGUsXHJcbiAgICByZXNldE1hbmFnaW5nU3lzdGVtU3RhdGUsXHJcbiAgICByZXNldE5ldHdvcmtSZXBvcnRzU3RhdGUsXHJcbiAgICByZXNldE5ldHdvcmtTdGF0ZSxcclxuICAgIHJlc2V0U2ltdWxhdGlvblN0YXRlLFxyXG4gICAgU0lNVUxBVElPTl9TVEFURVxyXG59IGZyb20gXCIuLi9tb2R1bGVcIlxyXG5cclxuY29uc3QgcmVzZXRTeXN0ZW1TdGF0ZSA9ICgpID0+IHtcclxuICAgIHJlc2V0QWdlbnRzUmVwb3J0c1N0YXRlKClcclxuICAgIHJlc2V0QWdlbnRzU3RhdGUoKVxyXG4gICAgcmVzZXRHcmFwaFN0YXRlKClcclxuICAgIHJlc2V0Q2xpZW50c1JlcG9ydHNTdGF0ZSgpXHJcbiAgICByZXNldENsaWVudHNTdGF0ZSgpXHJcbiAgICByZXNldE1hbmFnaW5nU3lzdGVtU3RhdGUoKVxyXG4gICAgcmVzZXROZXR3b3JrUmVwb3J0c1N0YXRlKClcclxuICAgIHJlc2V0TmV0d29ya1N0YXRlKClcclxuICAgIHJlc2V0U2ltdWxhdGlvblN0YXRlKClcclxufVxyXG5cclxuY29uc3QgZ2V0U3lzdGVtU3RhdGUgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICBzeXN0ZW1TdGFydFRpbWU6IFNJTVVMQVRJT05fU1RBVEUuc3lzdGVtU3RhcnRUaW1lLFxyXG4gICAgICAgIHNlY29uZHNQZXJIb3VyOiBTSU1VTEFUSU9OX1NUQVRFLnN5c3RlbVN0YXJ0VGltZSxcclxuICAgICAgICBuZXR3b3JrOiB7IC4uLk5FVFdPUktfU1RBVEUgfSxcclxuICAgICAgICBhZ2VudHM6IHtcclxuICAgICAgICAgICAgLi4uQ0xJRU5UU19TVEFURSxcclxuICAgICAgICAgICAgLi4uQUdFTlRTX1NUQVRFXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYW5hZ2luZ1N5c3RlbTogeyAuLi5NQU5BR0lOR19TWVNURU1fU1RBVEUgfSxcclxuICAgICAgICBncmFwaDogeyAuLi5HUkFQSF9TVEFURSB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5jb25zdCBnZXRBZ2VudHNTdGF0ZSA9ICgpID0+IHtcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIC4uLkFHRU5UU19TVEFURSxcclxuICAgICAgICBncmFwaDogeyAuLi5HUkFQSF9TVEFURSB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5jb25zdCBnZXRHcmFwaFN0YXRlID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuICh7XHJcbiAgICAgICAgLi4uR1JBUEhfU1RBVEVcclxuICAgIH0pXHJcbn1cclxuXHJcbmNvbnN0IGdldENsaWVudHNTdGF0ZSA9ICgpID0+IHtcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIGNsaWVudHM6IENMSUVOVFNfU1RBVEUuY2xpZW50cy5tYXAoY2xpZW50ID0+ICh7IG5hbWU6IGNsaWVudC5uYW1lLCBzdGF0dXM6IGNsaWVudC5zdGF0dXMsIGlzU3BsaXQ6IGNsaWVudC5pc1NwbGl0IH0pKSxcclxuICAgIH0pXHJcbn1cclxuXHJcbmNvbnN0IGdldENsaWVudCA9IChjbGllbnROYW1lOiBzdHJpbmcpID0+IHtcclxuICAgIHJldHVybiBDTElFTlRTX1NUQVRFLmNsaWVudHMuZmlsdGVyKGNsaWVudCA9PiBjbGllbnQubmFtZS50b1VwcGVyQ2FzZSgpID09PSBjbGllbnROYW1lLnRvVXBwZXJDYXNlKCkpWzBdID8/IG51bGxcclxufVxyXG5cclxuY29uc3QgZ2V0QWdlbnQgPSAoYWdlbnROYW1lOiBzdHJpbmcpID0+IHtcclxuICAgIHJldHVybiBBR0VOVFNfU1RBVEUuYWdlbnRzLmZpbHRlcihhZ2VudCA9PiBhZ2VudC5uYW1lLnRvVXBwZXJDYXNlKCkgPT09IGFnZW50TmFtZS50b1VwcGVyQ2FzZSgpKVswXSA/PyBudWxsXHJcbn1cclxuXHJcbmNvbnN0IGdldE1hbmFnaW5nU3RhdGUgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICBtYW5hZ2luZzogeyAuLi5NQU5BR0lOR19TWVNURU1fU1RBVEUgfSxcclxuICAgIH0pXHJcbn1cclxuXHJcbmNvbnN0IGdldE5ldHdvcmtTdGF0ZSA9ICgpID0+IHtcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIG5ldHdvcms6IHsgLi4uTkVUV09SS19TVEFURSB9LFxyXG4gICAgICAgIHNpbXVsYXRpb246IHsgLi4uU0lNVUxBVElPTl9TVEFURSB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxuY29uc3QgZ2V0UmVwb3J0c1N0YXRlID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuICh7XHJcbiAgICAgICAgLi4uTkVUV09SS19SRVBPUlRTX1NUQVRFLFxyXG4gICAgICAgIC4uLkNMSUVOVFNfUkVQT1JUU19TVEFURSxcclxuICAgICAgICAuLi5BR0VOVFNfUkVQT1JUU19TVEFURVxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIHJlc2V0U3lzdGVtU3RhdGUsXHJcbiAgICBnZXRTeXN0ZW1TdGF0ZSxcclxuICAgIGdldEFnZW50c1N0YXRlLFxyXG4gICAgZ2V0R3JhcGhTdGF0ZSxcclxuICAgIGdldENsaWVudHNTdGF0ZSxcclxuICAgIGdldENsaWVudCxcclxuICAgIGdldEFnZW50LFxyXG4gICAgZ2V0TWFuYWdpbmdTdGF0ZSxcclxuICAgIGdldE5ldHdvcmtTdGF0ZSxcclxuICAgIGdldFJlcG9ydHNTdGF0ZVxyXG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFtQmtCLFNBQUFDLFFBQUFDLEdBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixHQUFBLGtCQUFBQSxHQUFBLGdCQUFBQSxHQUFBLFdBQUFBLEdBQUEseUJBQUFDLE1BQUEsSUFBQUQsR0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsR0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLEdBQUEsS0FBQUQsT0FBQSxDQUFBQyxHQUFBO0FBQUEsU0FBQUssUUFBQUMsTUFB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