"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetSystemState = exports.getSystemState = exports.getReportsState = exports.getNetworkState = exports.getNetworkReportsState = exports.getManagingState = exports.getManaginReportsState = exports.getGraphState = exports.getClientsState = exports.getClientsReportsState = exports.getClient = exports.getAgentsState = exports.getAgentsReportsState = exports.getAgent = void 0;
var _module = require("../module");
var _timeUtils = require("./time-utils");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var resetSystemState = function resetSystemState() {
  (0, _module.resetAgentsReportsState)();
  (0, _module.resetAgentsState)();
  (0, _module.resetGraphState)();
  (0, _module.resetClientsReportsState)();
  (0, _module.resetClientsState)();
  (0, _module.resetManagingSystemState)();
  (0, _module.resetManagingSystemReportsState)();
  (0, _module.resetNetworkReportsState)();
  (0, _module.resetNetworkState)();
  (0, _module.resetSimulationState)();
};
exports.resetSystemState = resetSystemState;
var getSystemState = function getSystemState() {
  return {
    systemStartTime: _module.SIMULATION_STATE.systemStartTime,
    secondsPerHour: _module.SIMULATION_STATE.systemStartTime,
    network: _objectSpread({}, _module.NETWORK_STATE),
    agents: _objectSpread(_objectSpread({}, _module.CLIENTS_STATE), _module.AGENTS_STATE),
    managingSystem: _objectSpread({}, _module.MANAGING_SYSTEM_STATE),
    graph: _objectSpread({}, _module.GRAPH_STATE)
  };
};
exports.getSystemState = getSystemState;
var getAgentsState = function getAgentsState() {
  return _objectSpread(_objectSpread({}, _module.AGENTS_STATE), {}, {
    graph: _objectSpread({}, _module.GRAPH_STATE)
  });
};
exports.getAgentsState = getAgentsState;
var getGraphState = function getGraphState() {
  return _objectSpread({}, _module.GRAPH_STATE);
};
exports.getGraphState = getGraphState;
var getClientsState = function getClientsState() {
  return {
    clients: _module.CLIENTS_STATE.clients.map(function (client) {
      return {
        name: client.name,
        status: client.status,
        processorName: client.job.processorName
      };
    })
  };
};
exports.getClientsState = getClientsState;
var getClient = function getClient(clientName) {
  var _CLIENTS_STATE$client;
  return (_CLIENTS_STATE$client = _module.CLIENTS_STATE.clients.filter(function (client) {
    return client.name.toUpperCase() === clientName.toUpperCase();
  })[0]) !== null && _CLIENTS_STATE$client !== void 0 ? _CLIENTS_STATE$client : null;
};
exports.getClient = getClient;
var getAgent = function getAgent(agentName) {
  var _AGENTS_STATE$agents$;
  return (_AGENTS_STATE$agents$ = _module.AGENTS_STATE.agents.filter(function (agent) {
    return agent.name.toUpperCase() === agentName.toUpperCase();
  })[0]) !== null && _AGENTS_STATE$agents$ !== void 0 ? _AGENTS_STATE$agents$ : null;
};
exports.getAgent = getAgent;
var getManagingState = function getManagingState() {
  return {
    managing: _objectSpread({}, _module.MANAGING_SYSTEM_STATE)
  };
};
exports.getManagingState = getManagingState;
var getNetworkState = function getNetworkState() {
  return {
    network: _objectSpread({}, _module.NETWORK_STATE),
    simulation: _objectSpread({}, _module.SIMULATION_STATE)
  };
};
exports.getNetworkState = getNetworkState;
var filterReports = function filterReports(reportObject) {
  return Object.entries(reportObject).reduce(function (prev, curr) {
    return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, curr[0], curr[1].filter(function (entry) {
      return (0, _timeUtils.isWithinMonth)(entry.time);
    })));
  }, {});
};
var filterAgentReports = function filterAgentReports(agentReports) {
  return agentReports.agentsReports.length > 0 ? agentReports.agentsReports.map(function (reportsObject) {
    return _objectSpread(_objectSpread({}, reportsObject), {}, {
      reports: Object.entries(reportsObject.reports).reduce(function (prev, curr) {
        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, curr[0], curr[1].filter(function (entry) {
          return (0, _timeUtils.isWithinMonth)(entry.time);
        })));
      }, {})
    });
  }) : [];
};
var getNetworkReportsState = function getNetworkReportsState() {
  return filterReports(_module.NETWORK_REPORTS_STATE);
};
exports.getNetworkReportsState = getNetworkReportsState;
var getClientsReportsState = function getClientsReportsState() {
  return filterReports(_module.CLIENTS_REPORTS_STATE);
};
exports.getClientsReportsState = getClientsReportsState;
var getAgentsReportsState = function getAgentsReportsState() {
  return filterAgentReports(_module.AGENTS_REPORTS_STATE);
};
exports.getAgentsReportsState = getAgentsReportsState;
var getManaginReportsState = function getManaginReportsState() {
  return filterReports(_module.MANAGING_SYSTEM_REPORTS);
};
exports.getManaginReportsState = getManaginReportsState;
var getReportsState = function getReportsState() {
  return _objectSpread(_objectSpread(_objectSpread({}, filterReports(_module.NETWORK_REPORTS_STATE)), filterReports(_module.CLIENTS_REPORTS_STATE)), filterAgentReports(_module.AGENTS_REPORTS_STATE));
};
exports.getReportsState = getReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,