"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerServer = exports.registerScheduler = exports.registerMonitoring = exports.registerGreenEnergy = exports.registerCloudNetwork = exports.registerClient = exports.registerAgent = exports.getAgentsByName = exports.getAgentNodeById = exports.getAgentByName = void 0;
var _constants = require("../constants/constants");
var _module = require("../module");
var _reportHandler = require("../module/agents/report-handlers/report-handler");
var _excluded = ["name"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var getAgentByName = function getAgentByName(agents, agentName) {
  return agents.find(function (agent) {
    return agent.name === agentName;
  });
};
exports.getAgentByName = getAgentByName;
var getAgentsByName = function getAgentsByName(agents, agentNames) {
  return agents.filter(function (agent) {
    return agentNames.includes(agent.name);
  });
};
exports.getAgentsByName = getAgentsByName;
var getAgentNodeById = function getAgentNodeById(nodes, id) {
  return nodes.find(function (node) {
    return node.id === id;
  });
};
exports.getAgentNodeById = getAgentNodeById;
var addGreenSourcesToServer = function addGreenSourcesToServer(data) {
  _module.AGENTS_STATE.agents.filter(function (el) {
    return el.type === _constants.AGENT_TYPES.SERVER && el.name === data.serverAgent && !el.greenEnergyAgents.includes(data.name);
  }).forEach(function (server) {
    return server.greenEnergyAgents.push(data.name);
  });
};
var addServersToCNA = function addServersToCNA(data) {
  _module.AGENTS_STATE.agents.filter(function (el) {
    return el.type === _constants.AGENT_TYPES.CLOUD_NETWORK && el.name === data.cloudNetworkAgent && !el.serverAgents.includes(data.name);
  }).forEach(function (cna) {
    cna.maxCpuInServers += data.cpu;
    cna.serverAgents.push(data.name);
  });
};
var registerClient = function registerClient(data) {
  var name = data.name,
    jobData = _objectWithoutProperties(data, _excluded);
  return {
    type: _constants.AGENT_TYPES.CLIENT,
    status: _constants.JOB_STATUSES.CREATED,
    events: [],
    name: name,
    isActive: false,
    adaptation: "inactive",
    durationMap: null,
    job: jobData,
    jobExecutionProportion: 0
  };
};
exports.registerClient = registerClient;
var registerScheduler = function registerScheduler(data) {
  _module.AGENTS_REPORTS_STATE.agentsReports.push({
    name: data.name,
    type: _constants.AGENT_TYPES.SCHEDULER,
    reports: {
      deadlinePriorityReport: [],
      cpuPriorityReport: [],
      clientRequestReport: [],
      queueCapacityReport: [],
      trafficReport: []
    },
    events: []
  });
  return _objectSpread({
    type: _constants.AGENT_TYPES.SCHEDULER,
    scheduledJobs: [],
    events: [],
    isActive: true,
    adaptation: "inactive"
  }, data);
};
exports.registerScheduler = registerScheduler;
var registerCloudNetwork = function registerCloudNetwork(data) {
  _module.AGENTS_REPORTS_STATE.agentsReports.push({
    name: data.name,
    type: _constants.AGENT_TYPES.CLOUD_NETWORK,
    reports: {
      clientsReport: [],
      trafficReport: [],
      successRatioReport: []
    },
    events: []
  });
  return _objectSpread({
    type: _constants.AGENT_TYPES.CLOUD_NETWORK,
    events: [structuredClone(_constants.INITIAL_WEATHER_DROP_STATE)],
    isActive: false,
    adaptation: "inactive",
    totalNumberOfClients: 0,
    totalNumberOfExecutedJobs: 0,
    maxCpuInServers: data.maxServerCpu,
    traffic: 0,
    successRatio: 0
  }, data);
};
exports.registerCloudNetwork = registerCloudNetwork;
var registerServer = function registerServer(data) {
  var events = [structuredClone(_constants.INITIAL_POWER_SHORTAGE_STATE)];
  _module.AGENTS_REPORTS_STATE.agentsReports.push({
    name: data.name,
    type: _constants.AGENT_TYPES.SERVER,
    reports: {
      trafficReport: [],
      cpuInUseReport: [],
      memoryInUseReport: [],
      storageInUseReport: [],
      powerConsumptionReport: [],
      backUpPowerConsumptionReport: [],
      successRatioReport: []
    },
    events: []
  });
  addServersToCNA(data);
  (0, _reportHandler.changeCloudNetworkCapacityEvent)(data.cloudNetworkAgent, data.name, data.initialMaximumCapacity, true, true);
  return _objectSpread({
    type: _constants.AGENT_TYPES.SERVER,
    totalNumberOfClients: 0,
    events: events,
    isActive: false,
    adaptation: "inactive",
    traffic: 0,
    backUpTraffic: 0,
    inUseCpu: 0,
    inUseMemory: 0,
    inUseStorage: 0,
    powerConsumption: 0,
    powerConsumptionBackUp: 0,
    numberOfClients: 0,
    numberOfExecutedJobs: 0,
    numberOfJobsOnHold: 0,
    successRatio: 0
  }, data);
};
exports.registerServer = registerServer;
var registerGreenEnergy = function registerGreenEnergy(data) {
  var events = [structuredClone(_constants.INITIAL_POWER_SHORTAGE_STATE)];
  _module.AGENTS_REPORTS_STATE.agentsReports.push({
    name: data.name,
    type: _constants.AGENT_TYPES.GREEN_ENERGY,
    reports: {
      trafficReport: [],
      availableGreenPowerReport: [],
      energyInUseReport: [],
      jobsOnGreenPowerReport: [],
      jobsOnHoldReport: [],
      successRatioReport: []
    },
    events: []
  });
  addGreenSourcesToServer(data);
  return _objectSpread({
    type: _constants.AGENT_TYPES.GREEN_ENERGY,
    events: events,
    isActive: false,
    adaptation: "inactive",
    connectedServers: [data.serverAgent],
    traffic: 0,
    energyInUse: 0,
    numberOfExecutedJobs: 0,
    numberOfJobsOnHold: 0,
    successRatio: 0,
    availableGreenEnergy: 0
  }, data);
};
exports.registerGreenEnergy = registerGreenEnergy;
var registerMonitoring = function registerMonitoring(data) {
  return _objectSpread({
    type: _constants.AGENT_TYPES.MONITORING,
    events: [],
    isActive: false,
    adaptation: "inactive"
  }, data);
};
exports.registerMonitoring = registerMonitoring;
var registerAgent = function registerAgent(data, type) {
  switch (type) {
    case _constants.AGENT_TYPES.CLIENT:
      return registerClient(data);
    case _constants.AGENT_TYPES.CLOUD_NETWORK:
      return registerCloudNetwork(data);
    case _constants.AGENT_TYPES.GREEN_ENERGY:
      return registerGreenEnergy(data);
    case _constants.AGENT_TYPES.MONITORING:
      return registerMonitoring(data);
    case _constants.AGENT_TYPES.SERVER:
      return registerServer(data);
    case _constants.AGENT_TYPES.SCHEDULER:
      return registerScheduler(data);
  }
};
exports.registerAgent = registerAgent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,