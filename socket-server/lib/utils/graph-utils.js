"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getServerState = exports.getNodeState = exports.getGreenEnergyState = exports.getCloudNetworkState = exports.createServerEdges = exports.createNodeForAgent = exports.createGreenEnergyEdges = exports.createEdge = exports.createCloudNetworkEdges = exports.createAgentConnections = void 0;
var _constants = require("../constants/constants");
var _module = require("../module");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var getCloudNetworkState = function getCloudNetworkState(cloudNetwork) {
  if (cloudNetwork.traffic > 85) return 'high';
  if (cloudNetwork.traffic > 50) return 'medium';
  return cloudNetwork.traffic > 0 ? 'low' : 'inactive';
};
exports.getCloudNetworkState = getCloudNetworkState;
var getServerState = function getServerState(server) {
  if (server.numberOfJobsOnHold > 0) return 'on_hold';
  if (server.backUpTraffic > 0) return 'back_up';
  return server.isActive ? 'active' : 'inactive';
};
exports.getServerState = getServerState;
var getGreenEnergyState = function getGreenEnergyState(greenEnergy) {
  if (greenEnergy.numberOfJobsOnHold > 0 && greenEnergy.numberOfExecutedJobs > 0) return 'on_hold';
  return greenEnergy.isActive ? 'active' : 'inactive';
};
exports.getGreenEnergyState = getGreenEnergyState;
var getNodeState = function getNodeState(agent) {
  switch (agent.type) {
    case _constants.AGENT_TYPES.CLOUD_NETWORK:
      return getCloudNetworkState(agent);
    case _constants.AGENT_TYPES.GREEN_ENERGY:
      return getGreenEnergyState(agent);
    case _constants.AGENT_TYPES.SERVER:
      return getServerState(agent);
    default:
      return null;
  }
};
exports.getNodeState = getNodeState;
var createCloudNetworkEdges = function createCloudNetworkEdges(agent) {
  var scheduler = _module.AGENTS_STATE.agents.find(function (agent) {
    return agent.type === _constants.AGENT_TYPES.SCHEDULER;
  });
  var schedulerEdge = createEdge(agent.name, scheduler.name);
  return [schedulerEdge];
};
exports.createCloudNetworkEdges = createCloudNetworkEdges;
var createServerEdges = function createServerEdges(agent) {
  var cloudNetworkEdge = createEdge(agent.name, agent.cloudNetworkAgent);
  return [cloudNetworkEdge];
};
exports.createServerEdges = createServerEdges;
var createGreenEnergyEdges = function createGreenEnergyEdges(agent) {
  var edgeMonitoring = createEdge(agent.name, agent.monitoringAgent);
  var edgesServers = agent.connectedServers.map(function (server) {
    return createEdge(agent.name, server);
  });
  return edgesServers.concat(edgeMonitoring);
};
exports.createGreenEnergyEdges = createGreenEnergyEdges;
var createEdge = function createEdge(source, target) {
  var id = [source, target, 'BI'].join('-');
  return {
    data: {
      id: id,
      source: source,
      target: target
    },
    state: 'inactive'
  };
};
exports.createEdge = createEdge;
var createNodeForAgent = function createNodeForAgent(agent) {
  var node = {
    id: agent.name,
    label: agent.name,
    type: agent.type,
    adaptation: agent.adaptation
  };
  switch (agent.type) {
    case _constants.AGENT_TYPES.CLOUD_NETWORK:
    case _constants.AGENT_TYPES.GREEN_ENERGY:
    case _constants.AGENT_TYPES.SERVER:
      return _objectSpread({
        state: 'inactive'
      }, node);
    default:
      return node;
  }
};
exports.createNodeForAgent = createNodeForAgent;
var createAgentConnections = function createAgentConnections(agent) {
  switch (agent.type) {
    case _constants.AGENT_TYPES.SERVER:
      return createServerEdges(agent);
    case _constants.AGENT_TYPES.GREEN_ENERGY:
      return createGreenEnergyEdges(agent);
    case _constants.AGENT_TYPES.CLOUD_NETWORK:
      return createCloudNetworkEdges(agent);
    default:
      return [];
  }
};
exports.createAgentConnections = createAgentConnections;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc3RhbnRzIiwicmVxdWlyZSIsIl9tb2R1bGUiLCJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiZ2V0Q2xvdWROZXR3b3JrU3RhdGUiLCJjbG91ZE5ldHdvcmsiLCJ0cmFmZmljIiwiZXhwb3J0cyIsImdldFNlcnZlclN0YXRlIiwic2VydmVyIiwibnVtYmVyT2ZKb2JzT25Ib2xkIiwiYmFja1VwVHJhZmZpYyIsImlzQWN0aXZlIiwiZ2V0R3JlZW5FbmVyZ3lTdGF0ZSIsImdyZWVuRW5lcmd5IiwibnVtYmVyT2ZFeGVjdXRlZEpvYnMiLCJnZXROb2RlU3RhdGUiLCJhZ2VudCIsInR5cGUiLCJBR0VOVF9UWVBFUyIsIkNMT1VEX05FVFdPUksiLCJHUkVFTl9FTkVSR1kiLCJTRVJWRVIiLCJjcmVhdGVDbG91ZE5ldHdvcmtFZGdlcyIsInNjaGVkdWxlciIsIkFHRU5UU19TVEFURSIsImFnZW50cyIsImZpbmQiLCJTQ0hFRFVMRVIiLCJzY2hlZHVsZXJFZGdlIiwiY3JlYXRlRWRnZSIsIm5hbWUiLCJjcmVhdGVTZXJ2ZXJFZGdlcyIsImNsb3VkTmV0d29ya0VkZ2UiLCJjbG91ZE5ldHdvcmtBZ2VudCIsImNyZWF0ZUdyZWVuRW5lcmd5RWRnZXMiLCJlZGdlTW9uaXRvcmluZyIsIm1vbml0b3JpbmdBZ2VudCIsImVkZ2VzU2VydmVycyIsImNvbm5lY3RlZFNlcnZlcnMiLCJtYXAiLCJjb25jYXQiLCJpZCIsImpvaW4iLCJkYXRhIiwic3RhdGUiLCJjcmVhdGVOb2RlRm9yQWdlbnQiLCJub2RlIiwibGFiZWwiLCJhZGFwdGF0aW9uIiwiY3JlYXRlQWdlbnRDb25uZWN0aW9ucyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ncmFwaC11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBR0VOVF9UWVBFUyB9IGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCJcclxuaW1wb3J0IHsgQUdFTlRTX1NUQVRFIH0gZnJvbSBcIi4uL21vZHVsZVwiXHJcblxyXG5jb25zdCBnZXRDbG91ZE5ldHdvcmtTdGF0ZSA9IChjbG91ZE5ldHdvcmspID0+IHtcclxuICAgIGlmIChjbG91ZE5ldHdvcmsudHJhZmZpYyA+IDg1KSByZXR1cm4gJ2hpZ2gnXHJcbiAgICBpZiAoY2xvdWROZXR3b3JrLnRyYWZmaWMgPiA1MCkgcmV0dXJuICdtZWRpdW0nXHJcblxyXG4gICAgcmV0dXJuIGNsb3VkTmV0d29yay50cmFmZmljID4gMCA/ICdsb3cnIDogJ2luYWN0aXZlJ1xyXG59XHJcblxyXG5jb25zdCBnZXRTZXJ2ZXJTdGF0ZSA9IChzZXJ2ZXIpID0+IHtcclxuICAgIGlmIChzZXJ2ZXIubnVtYmVyT2ZKb2JzT25Ib2xkID4gMCkgcmV0dXJuICdvbl9ob2xkJ1xyXG4gICAgaWYgKHNlcnZlci5iYWNrVXBUcmFmZmljID4gMCkgcmV0dXJuICdiYWNrX3VwJ1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXIuaXNBY3RpdmUgPyAnYWN0aXZlJyA6ICdpbmFjdGl2ZSdcclxufVxyXG5cclxuY29uc3QgZ2V0R3JlZW5FbmVyZ3lTdGF0ZSA9IChncmVlbkVuZXJneSkgPT4ge1xyXG4gICAgaWYgKGdyZWVuRW5lcmd5Lm51bWJlck9mSm9ic09uSG9sZCA+IDAgJiYgZ3JlZW5FbmVyZ3kubnVtYmVyT2ZFeGVjdXRlZEpvYnMgPiAwKVxyXG4gICAgICAgIHJldHVybiAnb25faG9sZCdcclxuXHJcbiAgICByZXR1cm4gZ3JlZW5FbmVyZ3kuaXNBY3RpdmUgPyAnYWN0aXZlJyA6ICdpbmFjdGl2ZSdcclxufVxyXG5cclxuY29uc3QgZ2V0Tm9kZVN0YXRlID0gKGFnZW50KSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFnZW50LnR5cGUpIHtcclxuICAgICAgICBjYXNlIEFHRU5UX1RZUEVTLkNMT1VEX05FVFdPUks6XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRDbG91ZE5ldHdvcmtTdGF0ZShhZ2VudClcclxuICAgICAgICBjYXNlIEFHRU5UX1RZUEVTLkdSRUVOX0VORVJHWTpcclxuICAgICAgICAgICAgcmV0dXJuIGdldEdyZWVuRW5lcmd5U3RhdGUoYWdlbnQpXHJcbiAgICAgICAgY2FzZSBBR0VOVF9UWVBFUy5TRVJWRVI6XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRTZXJ2ZXJTdGF0ZShhZ2VudClcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVDbG91ZE5ldHdvcmtFZGdlcyA9IChhZ2VudCkgPT4ge1xyXG4gICAgY29uc3Qgc2NoZWR1bGVyID0gQUdFTlRTX1NUQVRFLmFnZW50cy5maW5kKGFnZW50ID0+IGFnZW50LnR5cGUgPT09IEFHRU5UX1RZUEVTLlNDSEVEVUxFUilcclxuICAgIGNvbnN0IHNjaGVkdWxlckVkZ2UgPSBjcmVhdGVFZGdlKGFnZW50Lm5hbWUsIHNjaGVkdWxlci5uYW1lKVxyXG5cclxuICAgIHJldHVybiBbc2NoZWR1bGVyRWRnZV1cclxufVxyXG5cclxuY29uc3QgY3JlYXRlU2VydmVyRWRnZXMgPSAoYWdlbnQpID0+IHtcclxuICAgIGNvbnN0IGNsb3VkTmV0d29ya0VkZ2UgPSBjcmVhdGVFZGdlKGFnZW50Lm5hbWUsIGFnZW50LmNsb3VkTmV0d29ya0FnZW50KVxyXG5cclxuICAgIHJldHVybiBbY2xvdWROZXR3b3JrRWRnZV1cclxufVxyXG5cclxuY29uc3QgY3JlYXRlR3JlZW5FbmVyZ3lFZGdlcyA9IChhZ2VudCkgPT4ge1xyXG4gICAgY29uc3QgZWRnZU1vbml0b3JpbmcgPSBjcmVhdGVFZGdlKGFnZW50Lm5hbWUsIGFnZW50Lm1vbml0b3JpbmdBZ2VudClcclxuICAgIGNvbnN0IGVkZ2VzU2VydmVycyA9IGFnZW50LmNvbm5lY3RlZFNlcnZlcnMubWFwKHNlcnZlciA9PiBjcmVhdGVFZGdlKGFnZW50Lm5hbWUsIHNlcnZlcikpXHJcblxyXG4gICAgcmV0dXJuIGVkZ2VzU2VydmVycy5jb25jYXQoZWRnZU1vbml0b3JpbmcpXHJcbn1cclxuXHJcbmNvbnN0IGNyZWF0ZUVkZ2UgPSAoc291cmNlLCB0YXJnZXQpID0+IHtcclxuICAgIGNvbnN0IGlkID0gW3NvdXJjZSwgdGFyZ2V0LCAnQkknXS5qb2luKCctJylcclxuICAgIHJldHVybiAoeyBkYXRhOiB7IGlkLCBzb3VyY2UsIHRhcmdldCB9LCBzdGF0ZTogJ2luYWN0aXZlJyB9KVxyXG59XHJcblxyXG5jb25zdCBjcmVhdGVOb2RlRm9yQWdlbnQgPSAoYWdlbnQpID0+IHtcclxuICAgIGNvbnN0IG5vZGUgPSB7XHJcbiAgICAgICAgaWQ6IGFnZW50Lm5hbWUsXHJcbiAgICAgICAgbGFiZWw6IGFnZW50Lm5hbWUsXHJcbiAgICAgICAgdHlwZTogYWdlbnQudHlwZSxcclxuICAgICAgICBhZGFwdGF0aW9uOiBhZ2VudC5hZGFwdGF0aW9uLFxyXG4gICAgfVxyXG4gICAgc3dpdGNoIChhZ2VudC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBBR0VOVF9UWVBFUy5DTE9VRF9ORVRXT1JLOlxyXG4gICAgICAgIGNhc2UgQUdFTlRfVFlQRVMuR1JFRU5fRU5FUkdZOlxyXG4gICAgICAgIGNhc2UgQUdFTlRfVFlQRVMuU0VSVkVSOlxyXG4gICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogJ2luYWN0aXZlJywgLi4ubm9kZSB9XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgY3JlYXRlQWdlbnRDb25uZWN0aW9ucyA9IChhZ2VudCkgPT4ge1xyXG4gICAgc3dpdGNoIChhZ2VudC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBBR0VOVF9UWVBFUy5TRVJWRVI6IHJldHVybiBjcmVhdGVTZXJ2ZXJFZGdlcyhhZ2VudClcclxuICAgICAgICBjYXNlIEFHRU5UX1RZUEVTLkdSRUVOX0VORVJHWTogcmV0dXJuIGNyZWF0ZUdyZWVuRW5lcmd5RWRnZXMoYWdlbnQpXHJcbiAgICAgICAgY2FzZSBBR0VOVF9UWVBFUy5DTE9VRF9ORVRXT1JLOiByZXR1cm4gY3JlYXRlQ2xvdWROZXR3b3JrRWRnZXMoYWdlbnQpXHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIFtdXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBnZXRDbG91ZE5ldHdvcmtTdGF0ZSxcclxuICAgIGdldEdyZWVuRW5lcmd5U3RhdGUsXHJcbiAgICBnZXRTZXJ2ZXJTdGF0ZSxcclxuICAgIGdldE5vZGVTdGF0ZSxcclxuICAgIGNyZWF0ZUNsb3VkTmV0d29ya0VkZ2VzLFxyXG4gICAgY3JlYXRlU2VydmVyRWRnZXMsXHJcbiAgICBjcmVhdGVHcmVlbkVuZXJneUVkZ2VzLFxyXG4gICAgY3JlYXRlRWRnZSxcclxuICAgIGNyZWF0ZU5vZGVGb3JBZ2VudCxcclxuICAgIGNyZWF0ZUFnZW50Q29ubmVjdGlvbnNcclxufSJdLCJtYXBwaW5n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