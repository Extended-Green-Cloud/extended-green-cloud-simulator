"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getServerState = exports.getNodeState = exports.getGreenEnergyState = exports.getCloudNetworkState = exports.createServerEdges = exports.createNodeForAgent = exports.createGreenEnergyEdges = exports.createEdge = exports.createCloudNetworkEdges = exports.createAgentConnections = void 0;
var _constants = require("../constants/constants");
var _module = require("../module");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var getCloudNetworkState = function getCloudNetworkState(cloudNetwork) {
  if (cloudNetwork.traffic > 85) return "high";
  if (cloudNetwork.traffic > 50) return "medium";
  return cloudNetwork.traffic > 0 ? "low" : "inactive";
};
exports.getCloudNetworkState = getCloudNetworkState;
var getServerState = function getServerState(server) {
  if (server.numberOfJobsOnHold > 0) return "on_hold";
  if (server.backUpTraffic > 0) return "back_up";
  return server.isActive ? "active" : "inactive";
};
exports.getServerState = getServerState;
var getGreenEnergyState = function getGreenEnergyState(greenEnergy) {
  if (greenEnergy.numberOfJobsOnHold > 0 && greenEnergy.numberOfExecutedJobs > 0) return "on_hold";
  return greenEnergy.isActive ? "active" : "inactive";
};
exports.getGreenEnergyState = getGreenEnergyState;
var getNodeState = function getNodeState(agent) {
  switch (agent.type) {
    case _constants.AGENT_TYPES.CLOUD_NETWORK:
      return getCloudNetworkState(agent);
    case _constants.AGENT_TYPES.GREEN_ENERGY:
      return getGreenEnergyState(agent);
    case _constants.AGENT_TYPES.SERVER:
      return getServerState(agent);
    default:
      return null;
  }
};
exports.getNodeState = getNodeState;
var createCloudNetworkEdges = function createCloudNetworkEdges(agent) {
  var scheduler = _module.AGENTS_STATE.agents.find(function (agent) {
    return agent.type === _constants.AGENT_TYPES.SCHEDULER;
  });
  var schedulerEdge = createEdge(agent.name, scheduler.name);
  return [schedulerEdge];
};
exports.createCloudNetworkEdges = createCloudNetworkEdges;
var createServerEdges = function createServerEdges(agent) {
  var cloudNetworkEdge = createEdge(agent.name, agent.cloudNetworkAgent);
  return [cloudNetworkEdge];
};
exports.createServerEdges = createServerEdges;
var createGreenEnergyEdges = function createGreenEnergyEdges(agent) {
  var edgeMonitoring = createEdge(agent.name, agent.monitoringAgent);
  var edgesServers = agent.connectedServers.map(function (server) {
    return createEdge(agent.name, server);
  });
  return edgesServers.concat(edgeMonitoring);
};
exports.createGreenEnergyEdges = createGreenEnergyEdges;
var createEdge = function createEdge(source, target) {
  var id = [source, target, "BI"].join("-");
  return {
    data: {
      id: id,
      source: source,
      target: target
    },
    state: "inactive"
  };
};
exports.createEdge = createEdge;
var createNodeForAgent = function createNodeForAgent(agent) {
  var node = {
    id: agent.name,
    label: agent.name,
    type: agent.type,
    adaptation: agent.adaptation
  };
  switch (agent.type) {
    case _constants.AGENT_TYPES.CLOUD_NETWORK:
    case _constants.AGENT_TYPES.GREEN_ENERGY:
    case _constants.AGENT_TYPES.SERVER:
      return _objectSpread({
        state: "inactive"
      }, node);
    default:
      return node;
  }
};
exports.createNodeForAgent = createNodeForAgent;
var createAgentConnections = function createAgentConnections(agent) {
  switch (agent.type) {
    case _constants.AGENT_TYPES.SERVER:
      return createServerEdges(agent);
    case _constants.AGENT_TYPES.GREEN_ENERGY:
      return createGreenEnergyEdges(agent);
    case _constants.AGENT_TYPES.CLOUD_NETWORK:
      return createCloudNetworkEdges(agent);
    default:
      return [];
  }
};
exports.createAgentConnections = createAgentConnections;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,