"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetManagingSystemState = exports.resetManagingSystemReportsState = exports.MANAGING_SYSTEM_STATE = exports.MANAGING_SYSTEM_REPORTS = void 0;
var LogType = function (LogType) {
  LogType[LogType["RECONFIGURE"] = 'RECONFIGURE'] = "RECONFIGURE";
  LogType[LogType["ADD_COMPONENT"] = 'ADD_COMPONENT'] = "ADD_COMPONENT";
  LogType[LogType["REMOVE_COMPONENT"] = 'REMOVE_COMPONENT'] = "REMOVE_COMPONENT";
  return LogType;
}(LogType || {});
var MANAGING_SYSTEM_REPORTS = {
  jobSuccessRatioReport: [],
  trafficDistributionReport: [],
  backUpPowerUsageReport: []
};
exports.MANAGING_SYSTEM_REPORTS = MANAGING_SYSTEM_REPORTS;
var MANAGING_SYSTEM_STATE = {
  systemIndicator: 0,
  goalQualityIndicators: [],
  performedAdaptations: 0,
  weakAdaptations: 0,
  strongAdaptations: 0,
  adaptationLogs: [],
  adaptationGoals: [],
  adaptationActions: []
};
exports.MANAGING_SYSTEM_STATE = MANAGING_SYSTEM_STATE;
var resetManagingSystemState = function resetManagingSystemState() {
  return Object.assign(MANAGING_SYSTEM_STATE, {
    systemIndicator: 0,
    goalQualityIndicators: [],
    performedAdaptations: 0,
    weakAdaptations: 0,
    strongAdaptations: 0,
    adaptationLogs: [],
    adaptationGoals: [],
    adaptationActions: []
  });
};
exports.resetManagingSystemState = resetManagingSystemState;
var resetManagingSystemReportsState = function resetManagingSystemReportsState() {
  return Object.assign(MANAGING_SYSTEM_REPORTS, {
    jobSuccessRatioReport: [],
    trafficDistributionReport: [],
    backUpPowerUsageReport: []
  });
};
exports.resetManagingSystemReportsState = resetManagingSystemReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMb2dUeXBlIiwiTUFOQUdJTkdfU1lTVEVNX1JFUE9SVFMiLCJqb2JTdWNjZXNzUmF0aW9SZXBvcnQiLCJ0cmFmZmljRGlzdHJpYnV0aW9uUmVwb3J0IiwiYmFja1VwUG93ZXJVc2FnZVJlcG9ydCIsImV4cG9ydHMiLCJNQU5BR0lOR19TWVNURU1fU1RBVEUiLCJzeXN0ZW1JbmRpY2F0b3IiLCJnb2FsUXVhbGl0eUluZGljYXRvcnMiLCJwZXJmb3JtZWRBZGFwdGF0aW9ucyIsIndlYWtBZGFwdGF0aW9ucyIsInN0cm9uZ0FkYXB0YXRpb25zIiwiYWRhcHRhdGlvbkxvZ3MiLCJhZGFwdGF0aW9uR29hbHMiLCJhZGFwdGF0aW9uQWN0aW9ucyIsInJlc2V0TWFuYWdpbmdTeXN0ZW1TdGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsInJlc2V0TWFuYWdpbmdTeXN0ZW1SZXBvcnRzU3RhdGUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlL21hbmFnaW5nLXN5c3RlbS9tYW5hZ2luZy1zeXN0ZW0tc3RhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVwb3J0RW50cnkgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIlxyXG5cclxudHlwZSBBZGFwdGF0aW9uR29hbFF1YWxpdHkgPSB7XHJcbiAgICBpZDogbnVtYmVyXHJcbiAgICBxdWFsaXR5OiBudW1iZXJcclxufVxyXG5cclxudHlwZSBBZGFwdGF0aW9uR29hbEF2Z1F1YWxpdHkgPSB7XHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGF2Z1F1YWxpdHk6IG51bWJlclxyXG59XHJcblxyXG5lbnVtIExvZ1R5cGUge1xyXG4gICAgUkVDT05GSUdVUkUgPSAnUkVDT05GSUdVUkUnIGFzIGFueSxcclxuICAgIEFERF9DT01QT05FTlQgPSAnQUREX0NPTVBPTkVOVCcgYXMgYW55LFxyXG4gICAgUkVNT1ZFX0NPTVBPTkVOVCA9ICdSRU1PVkVfQ09NUE9ORU5UJyBhcyBhbnksXHJcbn1cclxuXHJcbnR5cGUgQWRhcHRhdGlvbkxvZyA9IHtcclxuICAgIHR5cGU6IExvZ1R5cGVcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmdcclxuICAgIGFnZW50TmFtZT86IHN0cmluZ1xyXG4gICAgdGltZTogbnVtYmVyXHJcbn1cclxuXHJcbnR5cGUgQWRhcHRhdGlvbkdvYWwgPSB7XHJcbiAgICBpZDogbnVtYmVyXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIHRocmVzaG9sZDogbnVtYmVyXHJcbiAgICBpc0Fib3ZlVGhyZXNob2xkOiBib29sZWFuXHJcbiAgICB3ZWlnaHQ6IG51bWJlclxyXG59XHJcblxyXG50eXBlIEFkYXB0YXRpb25BY3Rpb24gPSB7XHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGdvYWw6IHN0cmluZ1xyXG4gICAgcnVuc05vOiBudW1iZXJcclxuICAgIGF2Z0dvYWxRdWFsaXRpZXM6IEFkYXB0YXRpb25Hb2FsQXZnUXVhbGl0eVtdXHJcbiAgICBhdmdEdXJhdGlvbjogbnVtYmVyXHJcbn1cclxuXHJcbmludGVyZmFjZSBNYW5hZ2luZ1N5c3RlbVN0YXRlIHtcclxuICAgIHN5c3RlbUluZGljYXRvcjogbnVtYmVyXHJcbiAgICBnb2FsUXVhbGl0eUluZGljYXRvcnM6IEFkYXB0YXRpb25Hb2FsUXVhbGl0eVtdXHJcbiAgICBwZXJmb3JtZWRBZGFwdGF0aW9uczogbnVtYmVyXHJcbiAgICB3ZWFrQWRhcHRhdGlvbnM6IG51bWJlclxyXG4gICAgc3Ryb25nQWRhcHRhdGlvbnM6IG51bWJlclxyXG4gICAgYWRhcHRhdGlvbkxvZ3M6IEFkYXB0YXRpb25Mb2dbXVxyXG4gICAgYWRhcHRhdGlvbkdvYWxzOiBBZGFwdGF0aW9uR29hbFtdXHJcbiAgICBhZGFwdGF0aW9uQWN0aW9uczogQWRhcHRhdGlvbkFjdGlvbltdXHJcbn1cclxuXHJcbmludGVyZmFjZSBNYW5hZ2luZ1N5c3RlbVJlcG9ydHNTdGF0ZSB7XHJcbiAgICBqb2JTdWNjZXNzUmF0aW9SZXBvcnQ6IFJlcG9ydEVudHJ5W11cclxuICAgIHRyYWZmaWNEaXN0cmlidXRpb25SZXBvcnQ6IFJlcG9ydEVudHJ5W11cclxuICAgIGJhY2tVcFBvd2VyVXNhZ2VSZXBvcnQ6IFJlcG9ydEVudHJ5W11cclxufVxyXG5cclxubGV0IE1BTkFHSU5HX1NZU1RFTV9SRVBPUlRTOiBNYW5hZ2luZ1N5c3RlbVJlcG9ydHNTdGF0ZSA9IHtcclxuICAgIGpvYlN1Y2Nlc3NSYXRpb1JlcG9ydDogW10sXHJcbiAgICB0cmFmZmljRGlzdHJpYnV0aW9uUmVwb3J0OiBbXSxcclxuICAgIGJhY2tVcFBvd2VyVXNhZ2VSZXBvcnQ6IFtdXHJcbn1cclxuXHJcbmxldCBNQU5BR0lOR19TWVNURU1fU1RBVEU6IE1hbmFnaW5nU3lzdGVtU3RhdGUgPSB7XHJcbiAgICBzeXN0ZW1JbmRpY2F0b3I6IDAsXHJcbiAgICBnb2FsUXVhbGl0eUluZGljYXRvcnM6IFtdLFxyXG4gICAgcGVyZm9ybWVkQWRhcHRhdGlvbnM6IDAsXHJcbiAgICB3ZWFrQWRhcHRhdGlvbnM6IDAsXHJcbiAgICBzdHJvbmdBZGFwdGF0aW9uczogMCxcclxuICAgIGFkYXB0YXRpb25Mb2dzOiBbXSxcclxuICAgIGFkYXB0YXRpb25Hb2FsczogW10sXHJcbiAgICBhZGFwdGF0aW9uQWN0aW9uczogW11cclxufVxyXG5cclxuY29uc3QgcmVzZXRNYW5hZ2luZ1N5c3RlbVN0YXRlID0gKCkgPT5cclxuICAgIE9iamVjdC5hc3NpZ24oTUFOQUdJTkdfU1lTVEVNX1NUQVRFLFxyXG4gICAgICAgICh7XHJcbiAgICAgICAgICAgIHN5c3RlbUluZGljYXRvcjogMCxcclxuICAgICAgICAgICAgZ29hbFF1YWxpdHlJbmRpY2F0b3JzOiBbXSxcclxuICAgICAgICAgICAgcGVyZm9ybWVkQWRhcHRhdGlvbnM6IDAsXHJcbiAgICAgICAgICAgIHdlYWtBZGFwdGF0aW9uczogMCxcclxuICAgICAgICAgICAgc3Ryb25nQWRhcHRhdGlvbnM6IDAsXHJcbiAgICAgICAgICAgIGFkYXB0YXRpb25Mb2dzOiBbXSxcclxuICAgICAgICAgICAgYWRhcHRhdGlvbkdvYWxzOiBbXSxcclxuICAgICAgICAgICAgYWRhcHRhdGlvbkFjdGlvbnM6IFtdXHJcbiAgICAgICAgfSkpXHJcblxyXG5jb25zdCByZXNldE1hbmFnaW5nU3lzdGVtUmVwb3J0c1N0YXRlID0gKCkgPT5cclxuICAgIE9iamVjdC5hc3NpZ24oTUFOQUdJTkdfU1lTVEVNX1JFUE9SVFMsXHJcbiAgICAgICAgKHtcclxuICAgICAgICAgICAgam9iU3VjY2Vzc1JhdGlvUmVwb3J0OiBbXSxcclxuICAgICAgICAgICAgdHJhZmZpY0Rpc3RyaWJ1dGlvblJlcG9ydDogW10sXHJcbiAgICAgICAgICAgIGJhY2tVcFBvd2VyVXNhZ2VSZXBvcnQ6IFtdXHJcbiAgICAgICAgfSkpXHJcblxyXG5leHBvcnQge1xyXG4gICAgQWRhcHRhdGlvbkdvYWwsXHJcbiAgICBBZGFwdGF0aW9uR29hbFF1YWxpdHksXHJcbiAgICBBZGFwdGF0aW9uTG9nLFxyXG4gICAgTWFuYWdpbmdTeXN0ZW1TdGF0ZSxcclxuICAgIEFkYXB0YXRpb25BY3Rpb24sXHJcbiAgICBBZGFwdGF0aW9uR29hbEF2Z1F1YWxpdHksXHJcbiAgICBNYW5hZ2luZ1N5c3RlbVJlcG9ydHNTdGF0ZSxcclxuICAgIE1BTkFHSU5HX1NZU1RFTV9TVEFURSxcclxuICAgIE1BTkFHSU5HX1NZU1RFTV9SRVBPUlRTLFxyXG4gICAgcmVzZXRNYW5hZ2luZ1N5c3RlbVN0YXRlLFxyXG4gICAgcmVzZXRNYW5hZ2luZ1N5c3RlbVJlcG9ydHNTdGF0ZVxyXG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7SUFZS0EsT0FBTyxhQUFQQSxPQUFPO0VBQVBBLE9BQU8sQ0FBUEEsT0FBTyxrQkFDTSxhQUFhO0VBRDFCQSxPQUFPLENBQVBBLE9BQU8sb0JBRVEsZUFBZTtFQUY5QkEsT0FBTyxDQUFQQSxPQUFPLHVCQUdXLGtCQUFrQjtFQUFBLE9BSHBDQSxPQUFPO0FBQUEsRUFBUEEsT0FBTztBQThDWixJQUFJQyx1QkFBbUQsR0FBRztFQUN0REMscUJBQXFCLEVBQUUsRUFBRTtFQUN6QkMseUJBQXlCLEVBQUUsRUFBRTtFQUM3QkMsc0JBQXNCLEVBQUU7QUFDNUIsQ0FBQztBQUFBQyxPQUFBLENBQUFKLHVCQUFBLEdBQUFBLHVCQUFBO0FBRUQsSUFBSUsscUJBQTBDLEdBQUc7RUFDN0NDLGVBQWUsRUFBRSxDQUFDO0VBQ2xCQyxxQkFBcUIsRUFBRSxFQUFFO0VBQ3pCQyxvQkFBb0IsRUFBRSxDQUFDO0VBQ3ZCQyxlQUFlLEVBQUUsQ0FBQztFQUNsQkMsaUJBQWlCLEVBQUUsQ0FBQztFQUNwQkMsY0FBYyxFQUFFLEVBQUU7RUFDbEJDLGVBQWUsRUFBRSxFQUFFO0VBQ25CQyxpQkFBaUIsRUFBRTtBQUN2QixDQUFDO0FBQUFULE9BQUEsQ0FBQUMscUJBQUEsR0FBQUEscUJBQUE7QUFFRCxJQUFNUyx3QkFBd0IsR0FBRyxTQUEzQkEsd0JBQXdCQSxDQUFBO0VBQUEsT0FDMUJDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDWCxxQkFBcUIsRUFDOUI7SUFDR0MsZUFBZSxFQUFFLENBQUM7SUFDbEJDLHFCQUFxQixFQUFFLEVBQUU7SUFDekJDLG9CQUFvQixFQUFFLENBQUM7SUFDdkJDLGVBQWUsRUFBRSxDQUFDO0lBQ2xCQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCQyxjQUFjLEVBQUUsRUFBRTtJQUNsQkMsZUFBZSxFQUFFLEVBQUU7SUFDbkJDLGlCQUFpQixFQUFFO0VBQ3ZCLENBQUUsQ0FBQztBQUFBO0FBQUFULE9BQUEsQ0FBQVUsd0JBQUEsR0FBQUEsd0JBQUE7QUFFWCxJQUFNRywrQkFBK0IsR0FBRyxTQUFsQ0EsK0JBQStCQSxDQUFBO0VBQUEsT0FDakNGLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDaEIsdUJBQXVCLEVBQ2hDO0lBQ0dDLHFCQUFxQixFQUFFLEVBQUU7SUFDekJDLHlCQUF5QixFQUFFLEVBQUU7SUFDN0JDLHNCQUFzQixFQUFFO0VBQzVCLENBQUUsQ0FBQztBQUFBO0FBQUFDLE9BQUEsQ0FBQWEsK0JBQUEsR0FBQUEsK0JBQUEifQ==