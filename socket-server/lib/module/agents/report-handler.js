"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateAgentsReportsState = exports.changeCloudNetworkCapacityEvent = void 0;
var _index = require("../../constants/index.js");
var _index2 = require("../../utils/index.js");
var _agentsState = require("./agents-state.js");
var changeCloudNetworkCapacityEvent = function changeCloudNetworkCapacityEvent(cnaName, serverName, capacity, isAdded) {
  var _AGENTS_REPORTS_STATE;
  var events = (_AGENTS_REPORTS_STATE = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === cnaName;
  })[0]) === null || _AGENTS_REPORTS_STATE === void 0 ? void 0 : _AGENTS_REPORTS_STATE.events;
  if (events) {
    var eventName = isAdded ? 'New Server' : 'Server disabled';
    var event = isAdded ? "added to ".concat(cnaName) : "disabled from ".concat(cnaName);
    var eventDescription = "Server ".concat(serverName, " with capacity ").concat(capacity, " was ").concat(event);
    events.push({
      type: 'AGENT_CONNECTION_CHANGE',
      time: (0, _index2.getCurrentTime)(),
      name: eventName,
      description: eventDescription
    });
  }
};
exports.changeCloudNetworkCapacityEvent = changeCloudNetworkCapacityEvent;
var reportSystemTraffic = function reportSystemTraffic(time) {
  var currentState = _agentsState.AGENTS_STATE.agents.filter(function (agent) {
    return agent.type === _index.AGENT_TYPES.CLOUD_NETWORK;
  }).reduce(function (sum, agent) {
    sum.capacity = sum.capacity + agent.maximumCapacity;
    sum.traffic = sum.traffic + agent.maximumCapacity * agent.traffic;
    return sum;
  }, {
    capacity: 0,
    traffic: 0
  });
  var currentTraffic = currentState.capacity === 0 ? 0 : currentState.traffic / currentState.capacity;
  return {
    time: time,
    value: currentTraffic
  };
};
var reportSchedulerData = function reportSchedulerData(agent, time) {
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  var queueCapacity = agent.maxQueueSize === 0 ? 0 : agent.scheduledJobs.length / agent.maxQueueSize;
  reports.deadlinePriorityReport.push({
    time: time,
    value: agent.deadlinePriority
  });
  reports.powerPriorityReport.push({
    time: time,
    value: agent.powerPriority
  });
  reports.queueCapacityReport.push({
    time: time,
    value: queueCapacity
  });
};
var reportCloudNetworkData = function reportCloudNetworkData(agent, time) {
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  reports.clientsReport.push({
    time: time,
    value: agent.totalNumberOfClients
  });
  reports.capacityReport.push({
    time: time,
    value: agent.maximumCapacity
  });
  reports.trafficReport.push({
    time: time,
    value: agent.traffic
  });
  reports.successRatioReport.push({
    time: time,
    value: agent.successRatio
  });
};
var reportServerData = function reportServerData(agent, time) {
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  reports.trafficReport.push({
    time: time,
    value: agent.traffic
  });
  reports.capacityReport.push({
    time: time,
    value: agent.currentMaximumCapacity
  });
  reports.greenPowerUsageReport.push({
    time: time,
    value: agent.traffic
  });
  reports.greenPowerUsageReport.push({
    time: time,
    value: agent.currentMaximumCapacity * agent.backUpTraffic
  });
  reports.successRatioReport.push({
    time: time,
    value: agent.successRatio
  });
};
var reportGreenSourceData = function reportGreenSourceData(agent, time) {
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  reports.trafficReport.push({
    time: time,
    value: agent.traffic
  });
  reports.availableGreenPowerReport.push({
    time: time,
    value: agent.availableGreenEnergy
  });
  reports.capacityReport.push({
    time: time,
    value: agent.currentMaximumCapacity
  });
  reports.jobsOnGreenPowerReport.push({
    time: time,
    value: agent.numberOfExecutedJobs
  });
  reports.jobsOnHoldReport.push({
    time: time,
    value: agent.numberOfJobsOnHold
  });
  reports.successRatioReport.push({
    time: time,
    value: agent.successRatio
  });
};
var updateAgentsReportsState = function updateAgentsReportsState(time) {
  _agentsState.AGENTS_STATE.agents.forEach(function (agent) {
    if (agent.type === _index.AGENT_TYPES.CLOUD_NETWORK) {
      reportCloudNetworkData(agent, time);
    } else if (agent.type === _index.AGENT_TYPES.SERVER) {
      reportServerData(agent, time);
    } else if (agent.type === _index.AGENT_TYPES.GREEN_ENERGY) {
      reportGreenSourceData(agent, time);
    } else if (agent.type === _index.AGENT_TYPES.SCHEDULER) {
      reportSchedulerData(agent, time);
    }
  });
};
exports.updateAgentsReportsState = updateAgentsReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,