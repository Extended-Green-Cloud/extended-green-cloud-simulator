"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateAgentsReportsState = exports.changeCloudNetworkCapacityEvent = void 0;
var _index = require("../../constants/index.js");
var _index2 = require("../../utils/index.js");
var _agentsState = require("./agents-state.js");
var changeCloudNetworkCapacityEvent = function changeCloudNetworkCapacityEvent(cnaName, serverName, cpu, isAdded, isNew) {
  var _AGENTS_REPORTS_STATE;
  var events = (_AGENTS_REPORTS_STATE = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === cnaName;
  })[0]) === null || _AGENTS_REPORTS_STATE === void 0 ? void 0 : _AGENTS_REPORTS_STATE.events;
  if (events) {
    var eventName = isAdded ? isNew ? "New Server" : "Server enabled" : "Server disabled";
    var event = isAdded ? isNew ? "added to ".concat(cnaName) : "enabled for ".concat(cnaName) : "disabled from ".concat(cnaName);
    var eventDescription = "Server ".concat(serverName, " with CPU ").concat(cpu, " was ").concat(event);
    events.push({
      type: _index.EVENT_TYPE.AGENT_CONNECTION_CHANGE,
      time: (0, _index2.getCurrentTime)(),
      name: eventName,
      description: eventDescription
    });
  }
};
exports.changeCloudNetworkCapacityEvent = changeCloudNetworkCapacityEvent;
var reportSystemTraffic = function reportSystemTraffic(time) {
  var currentState = _agentsState.AGENTS_STATE.agents.filter(function (agent) {
    return agent.type === _index.AGENT_TYPES.CLOUD_NETWORK;
  }).reduce(function (sum, agent) {
    sum.capacity = sum.capacity + agent.maximumCapacity;
    sum.traffic = sum.traffic + agent.maximumCapacity * agent.traffic;
    return sum;
  }, {
    capacity: 0,
    traffic: 0
  });
  var currentTraffic = currentState.capacity === 0 ? 0 : currentState.traffic / currentState.capacity;
  return {
    time: time,
    value: currentTraffic
  };
};
var reportSchedulerData = function reportSchedulerData(agent, time) {
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  var queueCapacity = agent.maxQueueSize === 0 ? 0 : agent.scheduledJobs.length;
  reports["deadlinePriorityReport"].push({
    time: time,
    value: agent.deadlinePriority
  });
  reports["cpuPriorityReport"].push({
    time: time,
    value: agent.cpuPriority
  });
  reports["queueCapacityReport"].push({
    time: time,
    value: queueCapacity
  });
  reports["trafficReport"].push(reportSystemTraffic(time));
};
var reportCloudNetworkData = function reportCloudNetworkData(agent, time) {
  var _agent$successRatio;
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  reports["clientsReport"].push({
    time: time,
    value: agent.totalNumberOfClients
  });
  reports["capacityReport"].push({
    time: time,
    value: agent.maximumCapacity
  });
  reports["trafficReport"].push({
    time: time,
    value: agent.traffic
  });
  reports["successRatioReport"].push({
    time: time,
    value: (_agent$successRatio = agent.successRatio) !== null && _agent$successRatio !== void 0 ? _agent$successRatio : 0
  });
};
var reportServerData = function reportServerData(agent, time) {
  var _agent$successRatio2;
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  reports["trafficReport"].push({
    time: time,
    value: agent.traffic
  });
  reports["capacityReport"].push({
    time: time,
    value: agent.currentMaximumCapacity
  });
  reports["greenPowerUsageReport"].push({
    time: time,
    value: agent.traffic
  });
  reports["backUpPowerUsageReport"].push({
    time: time,
    value: agent.currentMaximumCapacity * agent.backUpTraffic
  });
  reports["successRatioReport"].push({
    time: time,
    value: (_agent$successRatio2 = agent.successRatio) !== null && _agent$successRatio2 !== void 0 ? _agent$successRatio2 : 0
  });
};
var reportGreenSourceData = function reportGreenSourceData(agent, time) {
  var _agent$successRatio3;
  var reports = _agentsState.AGENTS_REPORTS_STATE.agentsReports.filter(function (agentReport) {
    return agentReport.name === agent.name;
  })[0].reports;
  reports["trafficReport"].push({
    time: time,
    value: agent.traffic
  });
  reports["availableGreenPowerReport"].push({
    time: time,
    value: agent.availableGreenEnergy
  });
  reports["capacityReport"].push({
    time: time,
    value: agent.currentMaximumCapacity
  });
  reports["jobsOnGreenPowerReport"].push({
    time: time,
    value: agent.numberOfExecutedJobs
  });
  reports["jobsOnHoldReport"].push({
    time: time,
    value: agent.numberOfJobsOnHold
  });
  reports["successRatioReport"].push({
    time: time,
    value: (_agent$successRatio3 = agent.successRatio) !== null && _agent$successRatio3 !== void 0 ? _agent$successRatio3 : 0
  });
};
var updateAgentsReportsState = function updateAgentsReportsState(time) {
  _agentsState.AGENTS_STATE.agents.forEach(function (agent) {
    if (agent.type === _index.AGENT_TYPES.CLOUD_NETWORK) {
      reportCloudNetworkData(agent, time);
    } else if (agent.type === _index.AGENT_TYPES.SERVER) {
      reportServerData(agent, time);
    } else if (agent.type === _index.AGENT_TYPES.GREEN_ENERGY) {
      reportGreenSourceData(agent, time);
    } else if (agent.type === _index.AGENT_TYPES.SCHEDULER) {
      reportSchedulerData(agent, time);
    }
  });
};
exports.updateAgentsReportsState = updateAgentsReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,