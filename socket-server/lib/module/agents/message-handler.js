"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleWeatherPredictionError = exports.handleUpdateServerConnection = exports.handleUpdatePowerPriority = exports.handleUpdateJobQueue = exports.handleUpdateGreenEnergy = exports.handleUpdateDeadlinePriority = exports.handleSetTraffic = exports.handleSetSuccessRatio = exports.handleSetMaximumCapacity = exports.handleSetJobsOnHold = exports.handleSetJobsCount = exports.handleSetClientNumber = exports.handleSetBackUpTraffic = exports.handleSetActive = exports.handleServerDisabling = exports.handleRemoveAgent = exports.handleRegisterAgent = exports.addServersToCNA = exports.addGreenSourcesToServer = void 0;
var _constants = require("../../constants/constants");
var _utils = require("../../utils");
var _clients = require("../clients");
var _graphState = require("../graph/graph-state");
var _agentsState = require("./agents-state");
var _reportHandler = require("./report-handler");
var getNewTraffic = function getNewTraffic(maximumCapacity, powerInUse) {
  return maximumCapacity === 0 ? 0 : powerInUse / maximumCapacity * 100;
};
var getNewCloudNetworkTraffic = function getNewCloudNetworkTraffic(agent, powerInUse) {
  agent.isActive = powerInUse > 0;
  agent.traffic = getNewTraffic(agent.maximumCapacity, powerInUse);
  var connection = _graphState.GRAPH_STATE.connections.find(function (el) {
    return el.data.source === agent.name;
  });
  if (connection) {
    connection.state = agent.isActive ? 'active' : 'inactive';
  }
};
var addGreenSourcesToServer = function addGreenSourcesToServer(data) {
  _agentsState.AGENTS_STATE.agents.filter(function (el) {
    return el.type === _constants.AGENT_TYPES.SERVER && el.name === data.serverAgent && !el.greenEnergyAgents.includes(data.name);
  }).forEach(function (server) {
    return server.greenEnergyAgents.push(data.name);
  });
};
exports.addGreenSourcesToServer = addGreenSourcesToServer;
var addServersToCNA = function addServersToCNA(data) {
  _agentsState.AGENTS_STATE.agents.filter(function (el) {
    return el.type === _constants.AGENT_TYPES.CLOUD_NETWORK && el.name === data.cloudNetworkAgent && !el.serverAgents.includes(data.name);
  }).forEach(function (cna) {
    return cna.serverAgents.push(data.name);
  });
};
exports.addServersToCNA = addServersToCNA;
var handleSetMaximumCapacity = function handleSetMaximumCapacity(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var node = (0, _utils.getAgentNodeById)(_graphState.GRAPH_STATE.nodes, msg.agentName);
  var _msg$data = msg.data,
    maximumCapacity = _msg$data.maximumCapacity,
    powerInUse = _msg$data.powerInUse;
  if (agent) {
    if (agent.type === _constants.AGENT_TYPES.CLOUD_NETWORK) {
      agent.maximumCapacity = maximumCapacity;
      getNewCloudNetworkTraffic(agent, powerInUse);
    } else {
      agent.currentMaximumCapacity = maximumCapacity;
      agent.traffic = getNewTraffic(maximumCapacity, powerInUse);
    }
    if (node) {
      node.state = (0, _utils.getNodeState)(agent);
    }
  }
};
exports.handleSetMaximumCapacity = handleSetMaximumCapacity;
var handleSetTraffic = function handleSetTraffic(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var node = (0, _utils.getAgentNodeById)(_graphState.GRAPH_STATE.nodes, msg.agentName);
  var powerInUse = msg.data;
  if (agent) {
    if (agent.type === _constants.AGENT_TYPES.CLOUD_NETWORK) {
      getNewCloudNetworkTraffic(agent, powerInUse);
    } else {
      agent.traffic = getNewTraffic(agent.currentMaximumCapacity, powerInUse);
    }
    if (node) {
      node.state = (0, _utils.getNodeState)(agent);
    }
  }
};
exports.handleSetTraffic = handleSetTraffic;
var handleSetBackUpTraffic = function handleSetBackUpTraffic(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var node = (0, _utils.getAgentNodeById)(_graphState.GRAPH_STATE.nodes, msg.agentName);
  var backUpPower = msg.data;
  if (agent) {
    agent.backUpTraffic = getNewTraffic(agent.currentMaximumCapacity, backUpPower);
    if (node) {
      node.state = (0, _utils.getNodeState)(agent);
    }
  }
};
exports.handleSetBackUpTraffic = handleSetBackUpTraffic;
var handleSetActive = function handleSetActive(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var node = (0, _utils.getAgentNodeById)(_graphState.GRAPH_STATE.nodes, msg.agentName);
  if (agent) {
    agent.isActive = msg.data;
    if (node) {
      node.state = (0, _utils.getNodeState)(agent);
    }
    _graphState.GRAPH_STATE.connections.forEach(function (connection) {
      if (connection.data.source === agent.name || connection.data.target === agent.name) {
        var secondAgent = connection.data.source === agent.name ? (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, connection.data.target) : (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, connection.data.source);
        connection.state = agent.isActive && secondAgent.isActive ? 'active' : 'inactive';
      }
    });
  }
};
exports.handleSetActive = handleSetActive;
var handleSetJobsOnHold = function handleSetJobsOnHold(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var node = (0, _utils.getAgentNodeById)(_graphState.GRAPH_STATE.nodes, msg.agentName);
  if (agent) {
    agent.numberOfJobsOnHold = msg.data;
    if (node) {
      node.state = (0, _utils.getNodeState)(agent);
    }
  }
};
exports.handleSetJobsOnHold = handleSetJobsOnHold;
var handleSetJobsCount = function handleSetJobsCount(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var node = (0, _utils.getAgentNodeById)(_graphState.GRAPH_STATE.nodes, msg.agentName);
  var jobsCount = msg.data;
  if (agent) {
    if (agent.type === _constants.AGENT_TYPES.SERVER || (agent === null || agent === void 0 ? void 0 : agent.type) === _constants.AGENT_TYPES.GREEN_ENERGY) {
      agent.numberOfExecutedJobs = jobsCount;
    } else if (agent.type === _constants.AGENT_TYPES.CLOUD_NETWORK) {
      agent.totalNumberOfExecutedJobs = jobsCount;
    }
    if (node) {
      node.state = (0, _utils.getNodeState)(agent);
    }
  }
};
exports.handleSetJobsCount = handleSetJobsCount;
var handleSetSuccessRatio = function handleSetSuccessRatio(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var successRatio = msg.data;
  if (agent) {
    if ((agent === null || agent === void 0 ? void 0 : agent.type) === _constants.AGENT_TYPES.SERVER || (agent === null || agent === void 0 ? void 0 : agent.type) === _constants.AGENT_TYPES.GREEN_ENERGY || (agent === null || agent === void 0 ? void 0 : agent.type) === _constants.AGENT_TYPES.CLOUD_NETWORK) {
      agent.successRatio = successRatio;
    }
  }
};
exports.handleSetSuccessRatio = handleSetSuccessRatio;
var handleSetClientNumber = function handleSetClientNumber(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var clientNumber = msg.data;
  if (agent) {
    agent.totalNumberOfClients = clientNumber;
  }
};
exports.handleSetClientNumber = handleSetClientNumber;
var handleWeatherPredictionError = function handleWeatherPredictionError(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  var error = msg.data;
  if (agent && agent.type === _constants.AGENT_TYPES.GREEN_ENERGY) {
    agent.weatherPredictionError = error;
  }
};
exports.handleWeatherPredictionError = handleWeatherPredictionError;
var handleUpdateJobQueue = function handleUpdateJobQueue(msg) {
  var agent = _agentsState.AGENTS_STATE.agents.find(function (agent) {
    return agent.type === _constants.AGENT_TYPES.SCHEDULER;
  });
  if (agent && agent.type === _constants.AGENT_TYPES.SCHEDULER) {
    agent.scheduledJobs = msg.data.map(function (job) {
      return job.jobId;
    });
  }
};
exports.handleUpdateJobQueue = handleUpdateJobQueue;
var handleUpdatePowerPriority = function handleUpdatePowerPriority(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  if (agent && agent.type === _constants.AGENT_TYPES.SCHEDULER) {
    agent.powerPriority = msg.data;
  }
};
exports.handleUpdatePowerPriority = handleUpdatePowerPriority;
var handleUpdateDeadlinePriority = function handleUpdateDeadlinePriority(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  if (agent && agent.type === _constants.AGENT_TYPES.SCHEDULER) {
    agent.deadlinePriority = msg.data;
  }
};
exports.handleUpdateDeadlinePriority = handleUpdateDeadlinePriority;
var handleRemoveAgent = function handleRemoveAgent(msg) {
  var agentName = msg.agentName;
  _agentsState.AGENTS_STATE.agents = _agentsState.AGENTS_STATE.agents.filter(function (agent) {
    return agent.name !== agentName;
  });
  _graphState.GRAPH_STATE.nodes = _graphState.GRAPH_STATE.nodes.filter(function (node) {
    return node.id !== agentName;
  });
  _graphState.GRAPH_STATE.connections = _graphState.GRAPH_STATE.connections.filter(function (edge) {
    return edge.data.target !== agentName && edge.data.source !== agentName;
  });
};
exports.handleRemoveAgent = handleRemoveAgent;
var handleUpdateGreenEnergy = function handleUpdateGreenEnergy(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  if (agent && agent.type === _constants.AGENT_TYPES.GREEN_ENERGY) {
    agent.availableGreenEnergy = msg.data;
  }
};
exports.handleUpdateGreenEnergy = handleUpdateGreenEnergy;
var handleServerDisabling = function handleServerDisabling(msg) {
  return (0, _reportHandler.changeCloudNetworkCapacityEvent)(msg.cna, msg.server, msg.capacity, false);
};
exports.handleServerDisabling = handleServerDisabling;
var handleRegisterAgent = function handleRegisterAgent(msg) {
  var agentType = msg.agentType;
  var registerData = msg.data;
  if (!(0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, registerData.name)) {
    var newAgent = (0, _utils.registerAgent)(registerData, agentType);
    if (newAgent) {
      if (agentType === _constants.AGENT_TYPES.CLIENT) {
        _clients.CLIENTS_STATE.clients.push(newAgent);
      } else {
        _agentsState.AGENTS_STATE.agents.push(newAgent);
        _graphState.GRAPH_STATE.nodes.push((0, _utils.createNodeForAgent)(newAgent));
        Object.assign(_graphState.GRAPH_STATE.connections, _graphState.GRAPH_STATE.connections.concat((0, _utils.createAgentConnections)(newAgent)));
      }
    }
  }
};
exports.handleRegisterAgent = handleRegisterAgent;
var handleUpdateServerConnection = function handleUpdateServerConnection(msg) {
  var agent = (0, _utils.getAgentByName)(_agentsState.AGENTS_STATE.agents, msg.agentName);
  if (agent) {
    var _msg$data2 = msg.data,
      isConnected = _msg$data2.isConnected,
      serverName = _msg$data2.serverName;
    if (isConnected) {
      agent.connectedServers.push(serverName);
      Object.assign(_graphState.GRAPH_STATE.connections, _graphState.GRAPH_STATE.connections.concat((0, _utils.createEdge)(agent.name, serverName)));
    } else {
      agent.connectedServers = agent.connectedServers.filter(function (server) {
        return server !== serverName;
      });
      _graphState.GRAPH_STATE.connections = _graphState.GRAPH_STATE.connections.filter(function (edge) {
        return edge.data.id !== [agent.name, serverName, 'BI'].join('-');
      });
    }
  }
};
exports.handleUpdateServerConnection = handleUpdateServerConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,