"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateNetworkReportsState = void 0;
var _networkState = require("./network-state");
var reportFailedJob = function reportFailedJob(time) {
  return {
    time: time,
    value: _networkState.NETWORK_STATE.failedJobsNo
  };
};
var reportFinishedJob = function reportFinishedJob(time) {
  return {
    time: time,
    value: _networkState.NETWORK_STATE.finishedJobsNo
  };
};
var reportClients = function reportClients(time) {
  return {
    time: time,
    value: _networkState.NETWORK_STATE.currClientsNo
  };
};
var reportJobsInServers = function reportJobsInServers(time) {
  return {
    time: time,
    value: _networkState.NETWORK_STATE.currActiveJobsNo
  };
};
var reportJobsInCloud = function reportJobsInCloud(time) {
  return {
    time: time,
    value: _networkState.NETWORK_STATE.currActiveInCloudJobsNo
  };
};
var updateNetworkReportsState = function updateNetworkReportsState(time) {
  var failJobsReport = _networkState.NETWORK_REPORTS_STATE.failJobsReport.concat(reportFailedJob(time));
  var finishJobsReport = _networkState.NETWORK_REPORTS_STATE.finishJobsReport.concat(reportFinishedJob(time));
  var clientsReport = _networkState.NETWORK_REPORTS_STATE.clientsReport.concat(reportClients(time));
  var executedInCloudReport = _networkState.NETWORK_REPORTS_STATE.executedInCloudReport.concat(reportJobsInCloud(time));
  var executedInServersReport = _networkState.NETWORK_REPORTS_STATE.executedInServersReport.concat(reportJobsInServers(time));
  Object.assign(_networkState.NETWORK_REPORTS_STATE, {
    failJobsReport: failJobsReport,
    finishJobsReport: finishJobsReport,
    clientsReport: clientsReport,
    executedInCloudReport: executedInCloudReport,
    executedInServersReport: executedInServersReport
  });
};
exports.updateNetworkReportsState = updateNetworkReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbmV0d29ya1N0YXRlIiwicmVxdWlyZSIsInJlcG9ydEZhaWxlZEpvYiIsInRpbWUiLCJ2YWx1ZSIsIk5FVFdPUktfU1RBVEUiLCJmYWlsZWRKb2JzTm8iLCJyZXBvcnRGaW5pc2hlZEpvYiIsImZpbmlzaGVkSm9ic05vIiwicmVwb3J0Q2xpZW50cyIsImN1cnJDbGllbnRzTm8iLCJyZXBvcnRKb2JzSW5TZXJ2ZXJzIiwiY3VyckFjdGl2ZUpvYnNObyIsInJlcG9ydEpvYnNJbkNsb3VkIiwiY3VyckFjdGl2ZUluQ2xvdWRKb2JzTm8iLCJ1cGRhdGVOZXR3b3JrUmVwb3J0c1N0YXRlIiwiZmFpbEpvYnNSZXBvcnQiLCJORVRXT1JLX1JFUE9SVFNfU1RBVEUiLCJjb25jYXQiLCJmaW5pc2hKb2JzUmVwb3J0IiwiY2xpZW50c1JlcG9ydCIsImV4ZWN1dGVkSW5DbG91ZFJlcG9ydCIsImV4ZWN1dGVkSW5TZXJ2ZXJzUmVwb3J0IiwiT2JqZWN0IiwiYXNzaWduIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGUvbmV0d29yay9yZXBvcnQtaGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBORVRXT1JLX1JFUE9SVFNfU1RBVEUsIE5FVFdPUktfU1RBVEUgfSBmcm9tIFwiLi9uZXR3b3JrLXN0YXRlXCI7XHJcblxyXG5jb25zdCByZXBvcnRGYWlsZWRKb2IgPSAodGltZTogbnVtYmVyKSA9PiAoeyB0aW1lLCB2YWx1ZTogTkVUV09SS19TVEFURS5mYWlsZWRKb2JzTm8gfSk7XHJcbmNvbnN0IHJlcG9ydEZpbmlzaGVkSm9iID0gKHRpbWU6IG51bWJlcikgPT4gKHsgdGltZSwgdmFsdWU6IE5FVFdPUktfU1RBVEUuZmluaXNoZWRKb2JzTm8gfSk7XHJcbmNvbnN0IHJlcG9ydENsaWVudHMgPSAodGltZTogbnVtYmVyKSA9PiAoeyB0aW1lLCB2YWx1ZTogTkVUV09SS19TVEFURS5jdXJyQ2xpZW50c05vIH0pO1xyXG5jb25zdCByZXBvcnRKb2JzSW5TZXJ2ZXJzID0gKHRpbWU6IG51bWJlcikgPT4gKHsgdGltZSwgdmFsdWU6IE5FVFdPUktfU1RBVEUuY3VyckFjdGl2ZUpvYnNObyB9KTtcclxuY29uc3QgcmVwb3J0Sm9ic0luQ2xvdWQgPSAodGltZTogbnVtYmVyKSA9PiAoeyB0aW1lLCB2YWx1ZTogTkVUV09SS19TVEFURS5jdXJyQWN0aXZlSW5DbG91ZEpvYnNObyB9KTtcclxuXHJcbmNvbnN0IHVwZGF0ZU5ldHdvcmtSZXBvcnRzU3RhdGUgPSAodGltZSkgPT4ge1xyXG5cdGNvbnN0IGZhaWxKb2JzUmVwb3J0ID0gTkVUV09SS19SRVBPUlRTX1NUQVRFLmZhaWxKb2JzUmVwb3J0LmNvbmNhdChyZXBvcnRGYWlsZWRKb2IodGltZSkpO1xyXG5cdGNvbnN0IGZpbmlzaEpvYnNSZXBvcnQgPSBORVRXT1JLX1JFUE9SVFNfU1RBVEUuZmluaXNoSm9ic1JlcG9ydC5jb25jYXQocmVwb3J0RmluaXNoZWRKb2IodGltZSkpO1xyXG5cdGNvbnN0IGNsaWVudHNSZXBvcnQgPSBORVRXT1JLX1JFUE9SVFNfU1RBVEUuY2xpZW50c1JlcG9ydC5jb25jYXQocmVwb3J0Q2xpZW50cyh0aW1lKSk7XHJcblx0Y29uc3QgZXhlY3V0ZWRJbkNsb3VkUmVwb3J0ID0gTkVUV09SS19SRVBPUlRTX1NUQVRFLmV4ZWN1dGVkSW5DbG91ZFJlcG9ydC5jb25jYXQocmVwb3J0Sm9ic0luQ2xvdWQodGltZSkpO1xyXG5cdGNvbnN0IGV4ZWN1dGVkSW5TZXJ2ZXJzUmVwb3J0ID0gTkVUV09SS19SRVBPUlRTX1NUQVRFLmV4ZWN1dGVkSW5TZXJ2ZXJzUmVwb3J0LmNvbmNhdChyZXBvcnRKb2JzSW5TZXJ2ZXJzKHRpbWUpKTtcclxuXHJcblx0T2JqZWN0LmFzc2lnbihORVRXT1JLX1JFUE9SVFNfU1RBVEUsIHtcclxuXHRcdGZhaWxKb2JzUmVwb3J0LFxyXG5cdFx0ZmluaXNoSm9ic1JlcG9ydCxcclxuXHRcdGNsaWVudHNSZXBvcnQsXHJcblx0XHRleGVjdXRlZEluQ2xvdWRSZXBvcnQsXHJcblx0XHRleGVjdXRlZEluU2VydmVyc1JlcG9ydCxcclxuXHR9KTtcclxufTtcclxuXHJcbmV4cG9ydCB7IHVwZGF0ZU5ldHdvcmtSZXBvcnRzU3RhdGUgfTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUlDLElBQVk7RUFBQSxPQUFNO0lBQUVBLElBQUksRUFBSkEsSUFBSTtJQUFFQyxLQUFLLEVBQUVDLDJCQUFhLENBQUNDO0VBQWEsQ0FBQztBQUFBLENBQUM7QUFDdkYsSUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUosSUFBWTtFQUFBLE9BQU07SUFBRUEsSUFBSSxFQUFKQSxJQUFJO0lBQUVDLEtBQUssRUFBRUMsMkJBQWEsQ0FBQ0c7RUFBZSxDQUFDO0FBQUEsQ0FBQztBQUMzRixJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUlOLElBQVk7RUFBQSxPQUFNO0lBQUVBLElBQUksRUFBSkEsSUFBSTtJQUFFQyxLQUFLLEVBQUVDLDJCQUFhLENBQUNLO0VBQWMsQ0FBQztBQUFBLENBQUM7QUFDdEYsSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBSVIsSUFBWTtFQUFBLE9BQU07SUFBRUEsSUFBSSxFQUFKQSxJQUFJO0lBQUVDLEtBQUssRUFBRUMsMkJBQWEsQ0FBQ087RUFBaUIsQ0FBQztBQUFBLENBQUM7QUFDL0YsSUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSVYsSUFBWTtFQUFBLE9BQU07SUFBRUEsSUFBSSxFQUFKQSxJQUFJO0lBQUVDLEtBQUssRUFBRUMsMkJBQWEsQ0FBQ1M7RUFBd0IsQ0FBQztBQUFBLENBQUM7QUFFcEcsSUFBTUMseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUF5QkEsQ0FBSVosSUFBSSxFQUFLO0VBQzNDLElBQU1hLGNBQWMsR0FBR0MsbUNBQXFCLENBQUNELGNBQWMsQ0FBQ0UsTUFBTSxDQUFDaEIsZUFBZSxDQUFDQyxJQUFJLENBQUMsQ0FBQztFQUN6RixJQUFNZ0IsZ0JBQWdCLEdBQUdGLG1DQUFxQixDQUFDRSxnQkFBZ0IsQ0FBQ0QsTUFBTSxDQUFDWCxpQkFBaUIsQ0FBQ0osSUFBSSxDQUFDLENBQUM7RUFDL0YsSUFBTWlCLGFBQWEsR0FBR0gsbUNBQXFCLENBQUNHLGFBQWEsQ0FBQ0YsTUFBTSxDQUFDVCxhQUFhLENBQUNOLElBQUksQ0FBQyxDQUFDO0VBQ3JGLElBQU1rQixxQkFBcUIsR0FBR0osbUNBQXFCLENBQUNJLHFCQUFxQixDQUFDSCxNQUFNLENBQUNMLGlCQUFpQixDQUFDVixJQUFJLENBQUMsQ0FBQztFQUN6RyxJQUFNbUIsdUJBQXVCLEdBQUdMLG1DQUFxQixDQUFDSyx1QkFBdUIsQ0FBQ0osTUFBTSxDQUFDUCxtQkFBbUIsQ0FBQ1IsSUFBSSxDQUFDLENBQUM7RUFFL0dvQixNQUFNLENBQUNDLE1BQU0sQ0FBQ1AsbUNBQXFCLEVBQUU7SUFDcENELGNBQWMsRUFBZEEsY0FBYztJQUNkRyxnQkFBZ0IsRUFBaEJBLGdCQUFnQjtJQUNoQkMsYUFBYSxFQUFiQSxhQUFhO0lBQ2JDLHFCQUFxQixFQUFyQkEscUJBQXFCO0lBQ3JCQyx1QkFBdUIsRUFBdkJBO0VBQ0QsQ0FBQyxDQUFDO0FBQ0gsQ0FBQztBQUFDRyxPQUFBLENBQUFWLHlCQUFBLEdBQUFBLHlCQUFBIn0=