"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleSetClientJobTimeFrame = exports.handleSetClientJobStatus = exports.handleSetClientJobDurationMap = exports.handleJobSplit = void 0;
var _constants = require("../../constants/constants");
var _agentUtils = require("../../utils/agent-utils");
var _clientsState = require("./clients-state");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var handleSetClientJobStatus = function handleSetClientJobStatus(msg) {
  var agent = (0, _agentUtils.getAgentByName)(_clientsState.CLIENTS_STATE.clients, msg.agentName);
  var jobStatus = msg.data.status;
  var splitJobId = msg.data.splitJobId;
  if (agent) {
    if (jobStatus === _constants.JOB_STATUSES.FAILED) {
      agent.status = jobStatus;
      if (agent.isSplit) {
        agent.splitJobs.forEach(function (job) {
          return job.status = jobStatus;
        });
      }
      return;
    }
    if (splitJobId) {
      var splitJob = agent.splitJobs.find(function (job) {
        return job.splitJobId === splitJobId;
      });
      if (splitJob) {
        splitJob.status = jobStatus;
      }
    } else {
      agent.status = jobStatus;
    }
  }
};
exports.handleSetClientJobStatus = handleSetClientJobStatus;
var handleSetClientJobTimeFrame = function handleSetClientJobTimeFrame(msg) {
  var agent = (0, _agentUtils.getAgentByName)(_clientsState.CLIENTS_STATE.clients, msg.agentName);
  var _msg$data = msg.data,
    start = _msg$data.start,
    end = _msg$data.end;
  var splitJobId = msg.data.splitJobId;
  if (agent) {
    if (splitJobId) {
      var splitJob = agent.splitJobs.find(function (job) {
        return job.splitJobId === splitJobId;
      });
      if (splitJob) {
        splitJob.start = start;
        splitJob.end = end;
      }
    } else {
      agent.job.start = start;
      agent.job.end = end;
    }
  }
};
exports.handleSetClientJobTimeFrame = handleSetClientJobTimeFrame;
var handleSetClientJobDurationMap = function handleSetClientJobDurationMap(msg) {
  var agent = (0, _agentUtils.getAgentByName)(_clientsState.CLIENTS_STATE.clients, msg.agentName);
  if (agent) {
    agent.durationMap = msg.data;
  }
};
exports.handleSetClientJobDurationMap = handleSetClientJobDurationMap;
var handleJobSplit = function handleJobSplit(msg) {
  var clients = _clientsState.CLIENTS_STATE.clients;
  var clientForSplit = clients.find(function (client) {
    return client.job.jobId === msg.jobId;
  });
  if (clientForSplit) {
    var splitData = msg.data.map(function (splitJob) {
      return _objectSpread({
        status: _constants.JOB_STATUSES.CREATED
      }, splitJob);
    });
    clientForSplit.isSplit = true;
    clientForSplit.splitJobs = splitData;
  }
};
exports.handleJobSplit = handleJobSplit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,