"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateClientReportsState = void 0;
var _constants = require("../../constants/constants");
var _clientsState = require("./clients-state");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var reportExecutedJob = function reportExecutedJob(time) {
  var activeStatuses = [_constants.JOB_STATUSES.IN_PROGRESS, _constants.JOB_STATUSES.ON_BACK_UP, _constants.JOB_STATUSES.ON_HOLD];
  var jobsNo = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).length;
  return {
    time: time,
    value: jobsNo
  };
};
var reportJobSizeData = function reportJobSizeData(time) {
  var activeStatuses = [_constants.JOB_STATUSES.IN_PROGRESS, _constants.JOB_STATUSES.ON_BACK_UP, _constants.JOB_STATUSES.ON_HOLD];
  var jobSizes = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).map(function (client) {
    return parseInt(client.job.power);
  });
  var isEmpty = jobSizes.length === 0;
  var avg = !isEmpty ? jobSizes.reduce(function (size1, size2) {
    return size1 + size2;
  }, 0) / jobSizes.length : 0;
  return {
    time: time,
    avg: avg,
    min: isEmpty ? 0 : Math.min.apply(Math, _toConsumableArray(jobSizes)),
    max: isEmpty ? 0 : Math.max.apply(Math, _toConsumableArray(jobSizes))
  };
};
var updateClientReportsState = function updateClientReportsState(time) {
  var jobSizeData = reportJobSizeData(time);
  var executedJobsReport = _clientsState.CLIENTS_REPORTS_STATE.executedJobsReport.concat(reportExecutedJob(time));
  var avgJobSizeReport = _clientsState.CLIENTS_REPORTS_STATE.avgJobSizeReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.avg
  });
  var minJobSizeReport = _clientsState.CLIENTS_REPORTS_STATE.minJobSizeReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.min
  });
  var maxJobSizeReport = _clientsState.CLIENTS_REPORTS_STATE.maxJobSizeReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.max
  });
  Object.assign(_clientsState.CLIENTS_REPORTS_STATE, {
    executedJobsReport: executedJobsReport,
    avgJobSizeReport: avgJobSizeReport,
    minJobSizeReport: minJobSizeReport,
    maxJobSizeReport: maxJobSizeReport
  });
};
exports.updateClientReportsState = updateClientReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc3RhbnRzIiwicmVxdWlyZSIsIl9jbGllbnRzU3RhdGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVHlwZUVycm9yIiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiQXJyYXkiLCJmcm9tIiwidGVzdCIsIml0ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImlzQXJyYXkiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsInJlcG9ydEV4ZWN1dGVkSm9iIiwidGltZSIsImFjdGl2ZVN0YXR1c2VzIiwiSk9CX1NUQVRVU0VTIiwiSU5fUFJPR1JFU1MiLCJPTl9CQUNLX1VQIiwiT05fSE9MRCIsImpvYnNObyIsIkNMSUVOVFNfU1RBVEUiLCJjbGllbnRzIiwiZmlsdGVyIiwiY2xpZW50IiwiaW5jbHVkZXMiLCJzdGF0dXMiLCJ2YWx1ZSIsInJlcG9ydEpvYlNpemVEYXRhIiwiam9iU2l6ZXMiLCJtYXAiLCJwYXJzZUludCIsImpvYiIsInBvd2VyIiwiaXNFbXB0eSIsImF2ZyIsInJlZHVjZSIsInNpemUxIiwic2l6ZTIiLCJtaW4iLCJNYXRoIiwiYXBwbHkiLCJtYXgiLCJ1cGRhdGVDbGllbnRSZXBvcnRzU3RhdGUiLCJqb2JTaXplRGF0YSIsImV4ZWN1dGVkSm9ic1JlcG9ydCIsIkNMSUVOVFNfUkVQT1JUU19TVEFURSIsImNvbmNhdCIsImF2Z0pvYlNpemVSZXBvcnQiLCJtaW5Kb2JTaXplUmVwb3J0IiwibWF4Sm9iU2l6ZVJlcG9ydCIsImFzc2lnbiIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlL2NsaWVudHMvcmVwb3J0LWhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSk9CX1NUQVRVU0VTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy9jb25zdGFudHNcIlxyXG5pbXBvcnQgeyBDTElFTlRTX1JFUE9SVFNfU1RBVEUsIENMSUVOVFNfU1RBVEUgfSBmcm9tIFwiLi9jbGllbnRzLXN0YXRlXCJcclxuXHJcbmNvbnN0IHJlcG9ydEV4ZWN1dGVkSm9iID0gKHRpbWU6IG51bWJlcikgPT4ge1xyXG4gICAgY29uc3QgYWN0aXZlU3RhdHVzZXMgPSBbSk9CX1NUQVRVU0VTLklOX1BST0dSRVNTLCBKT0JfU1RBVFVTRVMuT05fQkFDS19VUCwgSk9CX1NUQVRVU0VTLk9OX0hPTERdXHJcbiAgICBjb25zdCBqb2JzTm8gPSBDTElFTlRTX1NUQVRFLmNsaWVudHMuZmlsdGVyKGNsaWVudCA9PiBhY3RpdmVTdGF0dXNlcy5pbmNsdWRlcyhjbGllbnQuc3RhdHVzKSkubGVuZ3RoXHJcblxyXG4gICAgcmV0dXJuICh7IHRpbWUsIHZhbHVlOiBqb2JzTm8gfSlcclxufVxyXG5cclxuY29uc3QgcmVwb3J0Sm9iU2l6ZURhdGEgPSAodGltZTogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCBhY3RpdmVTdGF0dXNlcyA9IFtKT0JfU1RBVFVTRVMuSU5fUFJPR1JFU1MsIEpPQl9TVEFUVVNFUy5PTl9CQUNLX1VQLCBKT0JfU1RBVFVTRVMuT05fSE9MRF1cclxuICAgIGNvbnN0IGpvYlNpemVzID0gQ0xJRU5UU19TVEFURS5jbGllbnRzLmZpbHRlcihjbGllbnQgPT4gYWN0aXZlU3RhdHVzZXMuaW5jbHVkZXMoY2xpZW50LnN0YXR1cykpLm1hcChjbGllbnQgPT4gcGFyc2VJbnQoY2xpZW50LmpvYi5wb3dlcikpXHJcbiAgICBjb25zdCBpc0VtcHR5ID0gam9iU2l6ZXMubGVuZ3RoID09PSAwXHJcbiAgICBjb25zdCBhdmcgPSAhaXNFbXB0eSA/IGpvYlNpemVzLnJlZHVjZSgoc2l6ZTEsIHNpemUyKSA9PiBzaXplMSArIHNpemUyLCAwKSAvIGpvYlNpemVzLmxlbmd0aCA6IDBcclxuXHJcbiAgICByZXR1cm4gKHsgdGltZSwgYXZnLCBtaW46IGlzRW1wdHkgPyAwIDogTWF0aC5taW4oLi4uam9iU2l6ZXMpLCBtYXg6IGlzRW1wdHkgPyAwIDogTWF0aC5tYXgoLi4uam9iU2l6ZXMpIH0pXHJcbn1cclxuXHJcbmNvbnN0IHVwZGF0ZUNsaWVudFJlcG9ydHNTdGF0ZSA9ICh0aW1lKSA9PiB7XHJcbiAgICBjb25zdCBqb2JTaXplRGF0YSA9IHJlcG9ydEpvYlNpemVEYXRhKHRpbWUpXHJcblxyXG4gICAgY29uc3QgZXhlY3V0ZWRKb2JzUmVwb3J0ID0gQ0xJRU5UU19SRVBPUlRTX1NUQVRFLmV4ZWN1dGVkSm9ic1JlcG9ydC5jb25jYXQocmVwb3J0RXhlY3V0ZWRKb2IodGltZSkpXHJcbiAgICBjb25zdCBhdmdKb2JTaXplUmVwb3J0ID0gQ0xJRU5UU19SRVBPUlRTX1NUQVRFLmF2Z0pvYlNpemVSZXBvcnQuY29uY2F0KHsgdGltZTogam9iU2l6ZURhdGEudGltZSwgdmFsdWU6IGpvYlNpemVEYXRhLmF2ZyB9KVxyXG4gICAgY29uc3QgbWluSm9iU2l6ZVJlcG9ydCA9IENMSUVOVFNfUkVQT1JUU19TVEFURS5taW5Kb2JTaXplUmVwb3J0LmNvbmNhdCh7IHRpbWU6IGpvYlNpemVEYXRhLnRpbWUsIHZhbHVlOiBqb2JTaXplRGF0YS5taW4gfSlcclxuICAgIGNvbnN0IG1heEpvYlNpemVSZXBvcnQgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUubWF4Sm9iU2l6ZVJlcG9ydC5jb25jYXQoeyB0aW1lOiBqb2JTaXplRGF0YS50aW1lLCB2YWx1ZTogam9iU2l6ZURhdGEubWF4IH0pXHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihDTElFTlRTX1JFUE9SVFNfU1RBVEUsICh7IGV4ZWN1dGVkSm9ic1JlcG9ydCwgYXZnSm9iU2l6ZVJlcG9ydCwgbWluSm9iU2l6ZVJlcG9ydCwgbWF4Sm9iU2l6ZVJlcG9ydCB9KSlcclxufVxy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