"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateClientReportsState = void 0;
var _constants = require("../../constants/constants");
var _clientsState = require("./clients-state");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var reportExecutedJob = function reportExecutedJob(time) {
  var activeStatuses = [_constants.JOB_STATUSES.IN_PROGRESS, _constants.JOB_STATUSES.ON_BACK_UP, _constants.JOB_STATUSES.ON_HOLD];
  var jobsNo = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).length;
  return {
    time: time,
    value: jobsNo
  };
};
var reportJobSizeData = function reportJobSizeData(time) {
  var activeStatuses = [_constants.JOB_STATUSES.IN_PROGRESS, _constants.JOB_STATUSES.ON_BACK_UP, _constants.JOB_STATUSES.ON_HOLD];
  var jobsCpu = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).map(function (client) {
    return client.job.cpu;
  });
  var jobsMemory = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).map(function (client) {
    return client.job.memory;
  });
  var jobsStorage = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).map(function (client) {
    return client.job.storage;
  });
  var isEmpty = jobsCpu.length === 0;
  var avgCpu = !isEmpty ? jobsCpu.reduce(function (size1, size2) {
    return size1 + size2;
  }, 0) / jobsCpu.length : 0;
  var avgMemory = !isEmpty ? jobsMemory.reduce(function (size1, size2) {
    return size1 + size2;
  }, 0) / jobsMemory.length : 0;
  var avgStorage = !isEmpty ? jobsStorage.reduce(function (size1, size2) {
    return size1 + size2;
  }, 0) / jobsStorage.length : 0;
  return {
    time: time,
    avgCpu: avgCpu,
    avgMemory: avgMemory,
    avgStorage: avgStorage,
    minCpu: isEmpty ? 0 : Math.min.apply(Math, _toConsumableArray(jobsCpu)),
    minMemory: isEmpty ? 0 : Math.min.apply(Math, _toConsumableArray(jobsMemory)),
    minStorage: isEmpty ? 0 : Math.min.apply(Math, _toConsumableArray(jobsStorage)),
    maxCpu: isEmpty ? 0 : Math.max.apply(Math, _toConsumableArray(jobsCpu)),
    maxMemory: isEmpty ? 0 : Math.max.apply(Math, _toConsumableArray(jobsMemory)),
    maxStorage: isEmpty ? 0 : Math.max.apply(Math, _toConsumableArray(jobsStorage))
  };
};
var reportJobStatusExecutionTime = function reportJobStatusExecutionTime() {
  var clientsNo = _clientsState.CLIENTS_STATE.clients.length;
  var clientsDurationMaps = _clientsState.CLIENTS_STATE.clients.map(function (client) {
    return client.durationMap;
  });
  return Object.keys(_constants.JOB_STATUSES).map(function (status) {
    var _clientsDurationMaps$;
    var value = (_clientsDurationMaps$ = clientsDurationMaps === null || clientsDurationMaps === void 0 ? void 0 : clientsDurationMaps.map(function (durationMap) {
      return durationMap === null ? 0 : durationMap[status];
    }).reduce(function (prev, curr) {
      return prev + curr;
    }, 0)) !== null && _clientsDurationMaps$ !== void 0 ? _clientsDurationMaps$ : 0;
    return {
      status: status,
      value: clientsNo !== 0 ? value / clientsNo : 0
    };
  });
};
var reportJobExecutionPercentages = function reportJobExecutionPercentages() {
  var clientsNo = _clientsState.CLIENTS_STATE.clients.length;
  var clientsPercentages = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return client.status === _constants.JOB_STATUSES.FINISHED;
  }).map(function (client) {
    return client.jobExecutionProportion;
  });
  var clientPercentageSum = clientsPercentages.reduce(function (prev, curr) {
    return prev + curr;
  }, 0);
  var avgPercentage = (clientsNo !== 0 ? clientPercentageSum / clientsNo : 0) * 100;
  var minPercentage = Math.min.apply(Math, _toConsumableArray(clientsPercentages)) * 100;
  var maxPercentage = Math.max.apply(Math, _toConsumableArray(clientsPercentages)) * 100;
  return {
    avgPercentage: avgPercentage,
    minPercentage: minPercentage,
    maxPercentage: maxPercentage
  };
};
var updateClientReportsState = function updateClientReportsState(time) {
  var jobSizeData = reportJobSizeData(time);
  var jobPercentages = reportJobExecutionPercentages();
  var executedJobsReport = _clientsState.CLIENTS_REPORTS_STATE.executedJobsReport.concat(reportExecutedJob(time));
  var avgCpuReport = _clientsState.CLIENTS_REPORTS_STATE.avgCpuReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.avgCpu
  });
  var avgMemoryReport = _clientsState.CLIENTS_REPORTS_STATE.avgMemoryReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.avgMemory
  });
  var avgStorageReport = _clientsState.CLIENTS_REPORTS_STATE.avgStorageReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.avgStorage
  });
  var minCpuReport = _clientsState.CLIENTS_REPORTS_STATE.minCpuReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.minCpu
  });
  var minMemoryReport = _clientsState.CLIENTS_REPORTS_STATE.minMemoryReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.minMemory
  });
  var minStorageReport = _clientsState.CLIENTS_REPORTS_STATE.minStorageReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.minStorage
  });
  var maxCpuReport = _clientsState.CLIENTS_REPORTS_STATE.maxCpuReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.maxCpu
  });
  var maxMemoryReport = _clientsState.CLIENTS_REPORTS_STATE.maxMemoryReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.maxMemory
  });
  var maxStorageReport = _clientsState.CLIENTS_REPORTS_STATE.maxStorageReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.maxStorage
  });
  var clientsStatusReport = _clientsState.CLIENTS_REPORTS_STATE.clientsStatusReport.concat({
    time: time,
    value: reportJobStatusExecutionTime()
  });
  var avgClientsExecutionPercentage = _clientsState.CLIENTS_REPORTS_STATE.avgClientsExecutionPercentage.concat({
    time: time,
    value: jobPercentages.avgPercentage
  });
  var minClientsExecutionPercentage = _clientsState.CLIENTS_REPORTS_STATE.minClientsExecutionPercentage.concat({
    time: time,
    value: jobPercentages.minPercentage
  });
  var maxClientsExecutionPercentage = _clientsState.CLIENTS_REPORTS_STATE.maxClientsExecutionPercentage.concat({
    time: time,
    value: jobPercentages.maxPercentage
  });
  Object.assign(_clientsState.CLIENTS_REPORTS_STATE, {
    executedJobsReport: executedJobsReport,
    avgCpuReport: avgCpuReport,
    avgMemoryReport: avgMemoryReport,
    avgStorageReport: avgStorageReport,
    minCpuReport: minCpuReport,
    minMemoryReport: minMemoryReport,
    minStorageReport: minStorageReport,
    maxCpuReport: maxCpuReport,
    maxMemoryReport: maxMemoryReport,
    maxStorageReport: maxStorageReport,
    clientsStatusReport: clientsStatusReport,
    avgClientsExecutionPercentage: avgClientsExecutionPercentage,
    minClientsExecutionPercentage: minClientsExecutionPercentage,
    maxClientsExecutionPercentage: maxClientsExecutionPercentage
  });
};
exports.updateClientReportsState = updateClientReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,