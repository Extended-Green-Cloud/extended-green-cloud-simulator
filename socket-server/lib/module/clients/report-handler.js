"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateClientReportsState = void 0;
var _constants = require("../../constants/constants");
var _clientsState = require("./clients-state");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var reportExecutedJob = function reportExecutedJob(time) {
  var activeStatuses = [_constants.JOB_STATUSES.IN_PROGRESS, _constants.JOB_STATUSES.IN_PROGRESS_CLOUD, _constants.JOB_STATUSES.ON_BACK_UP, _constants.JOB_STATUSES.ON_HOLD];
  var jobsNo = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).length;
  return {
    time: time,
    value: jobsNo
  };
};
var reportJobSizeData = function reportJobSizeData(time) {
  var activeStatuses = [_constants.JOB_STATUSES.IN_PROGRESS, _constants.JOB_STATUSES.IN_PROGRESS_CLOUD, _constants.JOB_STATUSES.ON_BACK_UP, _constants.JOB_STATUSES.ON_HOLD];
  var jobsCpu = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).map(function (client) {
    return client.job.cpu;
  });
  var jobsMemory = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).map(function (client) {
    return client.job.memory;
  });
  var jobsStorage = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return activeStatuses.includes(client.status);
  }).map(function (client) {
    return client.job.storage;
  });
  var isEmpty = jobsCpu.length === 0;
  var avgCpu = !isEmpty ? jobsCpu.reduce(function (size1, size2) {
    return size1 + size2;
  }, 0) / jobsCpu.length : 0;
  var avgMemory = !isEmpty ? jobsMemory.reduce(function (size1, size2) {
    return size1 + size2;
  }, 0) / jobsMemory.length : 0;
  var avgStorage = !isEmpty ? jobsStorage.reduce(function (size1, size2) {
    return size1 + size2;
  }, 0) / jobsStorage.length : 0;
  return {
    time: time,
    avgCpu: avgCpu,
    avgMemory: avgMemory,
    avgStorage: avgStorage,
    minCpu: isEmpty ? 0 : Math.min.apply(Math, _toConsumableArray(jobsCpu)),
    minMemory: isEmpty ? 0 : Math.min.apply(Math, _toConsumableArray(jobsMemory)),
    minStorage: isEmpty ? 0 : Math.min.apply(Math, _toConsumableArray(jobsStorage)),
    maxCpu: isEmpty ? 0 : Math.max.apply(Math, _toConsumableArray(jobsCpu)),
    maxMemory: isEmpty ? 0 : Math.max.apply(Math, _toConsumableArray(jobsMemory)),
    maxStorage: isEmpty ? 0 : Math.max.apply(Math, _toConsumableArray(jobsStorage))
  };
};
var reportJobStatusExecutionTime = function reportJobStatusExecutionTime() {
  var clientsNo = _clientsState.CLIENTS_STATE.clients.length;
  var clientsDurationMaps = _clientsState.CLIENTS_STATE.clients.map(function (client) {
    return client.durationMap;
  });
  return Object.keys(_constants.JOB_STATUSES).map(function (status) {
    var _clientsDurationMaps$;
    var value = (_clientsDurationMaps$ = clientsDurationMaps === null || clientsDurationMaps === void 0 ? void 0 : clientsDurationMaps.map(function (durationMap) {
      return durationMap === null ? 0 : durationMap[status];
    }).reduce(function (prev, curr) {
      return prev + curr;
    }, 0)) !== null && _clientsDurationMaps$ !== void 0 ? _clientsDurationMaps$ : 0;
    return {
      status: status,
      value: clientsNo !== 0 ? value / clientsNo : 0
    };
  });
};
var reportJobExecutionPercentages = function reportJobExecutionPercentages() {
  var clientsNo = _clientsState.CLIENTS_STATE.clients.length;
  var clientsPercentages = _clientsState.CLIENTS_STATE.clients.filter(function (client) {
    return client.status === _constants.JOB_STATUSES.FINISHED;
  }).map(function (client) {
    return client.jobExecutionProportion;
  });
  var clientPercentageSum = clientsPercentages.reduce(function (prev, curr) {
    return prev + curr;
  }, 0);
  var avgPercentage = (clientsNo !== 0 ? clientPercentageSum / clientsNo : 0) * 100;
  var minPercentage = Math.min.apply(Math, _toConsumableArray(clientsPercentages)) * 100;
  var maxPercentage = Math.max.apply(Math, _toConsumableArray(clientsPercentages)) * 100;
  return {
    avgPercentage: avgPercentage,
    minPercentage: minPercentage,
    maxPercentage: maxPercentage
  };
};
var updateClientReportsState = function updateClientReportsState(time) {
  var jobSizeData = reportJobSizeData(time);
  var jobPercentages = reportJobExecutionPercentages();
  var executedJobsReport = _clientsState.CLIENTS_REPORTS_STATE.executedJobsReport.concat(reportExecutedJob(time));
  var avgCpuReport = _clientsState.CLIENTS_REPORTS_STATE.avgCpuReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.avgCpu
  });
  var avgMemoryReport = _clientsState.CLIENTS_REPORTS_STATE.avgMemoryReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.avgMemory
  });
  var avgStorageReport = _clientsState.CLIENTS_REPORTS_STATE.avgStorageReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.avgStorage
  });
  var minCpuReport = _clientsState.CLIENTS_REPORTS_STATE.minCpuReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.minCpu
  });
  var minMemoryReport = _clientsState.CLIENTS_REPORTS_STATE.minMemoryReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.minMemory
  });
  var minStorageReport = _clientsState.CLIENTS_REPORTS_STATE.minStorageReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.minStorage
  });
  var maxCpuReport = _clientsState.CLIENTS_REPORTS_STATE.maxCpuReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.maxCpu
  });
  var maxMemoryReport = _clientsState.CLIENTS_REPORTS_STATE.maxMemoryReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.maxMemory
  });
  var maxStorageReport = _clientsState.CLIENTS_REPORTS_STATE.maxStorageReport.concat({
    time: jobSizeData.time,
    value: jobSizeData.maxStorage
  });
  var clientsStatusReport = _clientsState.CLIENTS_REPORTS_STATE.clientsStatusReport.concat({
    time: time,
    value: reportJobStatusExecutionTime()
  });
  var avgClientsExecutionPercentage = _clientsState.CLIENTS_REPORTS_STATE.avgClientsExecutionPercentage.concat({
    time: time,
    value: jobPercentages.avgPercentage
  });
  var minClientsExecutionPercentage = _clientsState.CLIENTS_REPORTS_STATE.minClientsExecutionPercentage.concat({
    time: time,
    value: jobPercentages.minPercentage
  });
  var maxClientsExecutionPercentage = _clientsState.CLIENTS_REPORTS_STATE.maxClientsExecutionPercentage.concat({
    time: time,
    value: jobPercentages.maxPercentage
  });
  Object.assign(_clientsState.CLIENTS_REPORTS_STATE, {
    executedJobsReport: executedJobsReport,
    avgCpuReport: avgCpuReport,
    avgMemoryReport: avgMemoryReport,
    avgStorageReport: avgStorageReport,
    minCpuReport: minCpuReport,
    minMemoryReport: minMemoryReport,
    minStorageReport: minStorageReport,
    maxCpuReport: maxCpuReport,
    maxMemoryReport: maxMemoryReport,
    maxStorageReport: maxStorageReport,
    clientsStatusReport: clientsStatusReport,
    avgClientsExecutionPercentage: avgClientsExecutionPercentage,
    minClientsExecutionPercentage: minClientsExecutionPercentage,
    maxClientsExecutionPercentage: maxClientsExecutionPercentage
  });
};
exports.updateClientReportsState = updateClientReportsState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc3RhbnRzIiwicmVxdWlyZSIsIl9jbGllbnRzU3RhdGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVHlwZUVycm9yIiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiQXJyYXkiLCJmcm9tIiwidGVzdCIsIml0ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImlzQXJyYXkiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsInJlcG9ydEV4ZWN1dGVkSm9iIiwidGltZSIsImFjdGl2ZVN0YXR1c2VzIiwiSk9CX1NUQVRVU0VTIiwiSU5fUFJPR1JFU1MiLCJJTl9QUk9HUkVTU19DTE9VRCIsIk9OX0JBQ0tfVVAiLCJPTl9IT0xEIiwiam9ic05vIiwiQ0xJRU5UU19TVEFURSIsImNsaWVudHMiLCJmaWx0ZXIiLCJjbGllbnQiLCJpbmNsdWRlcyIsInN0YXR1cyIsInZhbHVlIiwicmVwb3J0Sm9iU2l6ZURhdGEiLCJqb2JzQ3B1IiwibWFwIiwiam9iIiwiY3B1Iiwiam9ic01lbW9yeSIsIm1lbW9yeSIsImpvYnNTdG9yYWdlIiwic3RvcmFnZSIsImlzRW1wdHkiLCJhdmdDcHUiLCJyZWR1Y2UiLCJzaXplMSIsInNpemUyIiwiYXZnTWVtb3J5IiwiYXZnU3RvcmFnZSIsIm1pbkNwdSIsIk1hdGgiLCJtaW4iLCJhcHBseSIsIm1pbk1lbW9yeSIsIm1pblN0b3JhZ2UiLCJtYXhDcHUiLCJtYXgiLCJtYXhNZW1vcnkiLCJtYXhTdG9yYWdlIiwicmVwb3J0Sm9iU3RhdHVzRXhlY3V0aW9uVGltZSIsImNsaWVudHNObyIsImNsaWVudHNEdXJhdGlvbk1hcHMiLCJkdXJhdGlvbk1hcCIsImtleXMiLCJfY2xpZW50c0R1cmF0aW9uTWFwcyQiLCJwcmV2IiwiY3VyciIsInJlcG9ydEpvYkV4ZWN1dGlvblBlcmNlbnRhZ2VzIiwiY2xpZW50c1BlcmNlbnRhZ2VzIiwiRklOSVNIRUQiLCJqb2JFeGVjdXRpb25Qcm9wb3J0aW9uIiwiY2xpZW50UGVyY2VudGFnZVN1bSIsImF2Z1BlcmNlbnRhZ2UiLCJtaW5QZXJjZW50YWdlIiwibWF4UGVyY2VudGFnZSIsInVwZGF0ZUNsaWVudFJlcG9ydHNTdGF0ZSIsImpvYlNpemVEYXRhIiwiam9iUGVyY2VudGFnZXMiLCJleGVjdXRlZEpvYnNSZXBvcnQiLCJDTElFTlRTX1JFUE9SVFNfU1RBVEUiLCJjb25jYXQiLCJhdmdDcHVSZXBvcnQiLCJhdmdNZW1vcnlSZXBvcnQiLCJhdmdTdG9yYWdlUmVwb3J0IiwibWluQ3B1UmVwb3J0IiwibWluTWVtb3J5UmVwb3J0IiwibWluU3RvcmFnZVJlcG9ydCIsIm1heENwdVJlcG9ydCIsIm1heE1lbW9yeVJlcG9ydCIsIm1heFN0b3JhZ2VSZXBvcnQiLCJjbGllbnRzU3RhdHVzUmVwb3J0IiwiYXZnQ2xpZW50c0V4ZWN1dGlvblBlcmNlbnRhZ2UiLCJtaW5DbGllbnRzRXhlY3V0aW9uUGVyY2VudGFnZSIsIm1heENsaWVudHNFeGVjdXRpb25QZXJjZW50YWdlIiwiYXNzaWduIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGUvY2xpZW50cy9yZXBvcnQtaGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKT0JfU1RBVFVTRVMgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBDTElFTlRTX1JFUE9SVFNfU1RBVEUsIENMSUVOVFNfU1RBVEUgfSBmcm9tIFwiLi9jbGllbnRzLXN0YXRlXCI7XHJcblxyXG5jb25zdCByZXBvcnRFeGVjdXRlZEpvYiA9ICh0aW1lOiBudW1iZXIpID0+IHtcclxuXHRjb25zdCBhY3RpdmVTdGF0dXNlcyA9IFtcclxuXHRcdEpPQl9TVEFUVVNFUy5JTl9QUk9HUkVTUyxcclxuXHRcdEpPQl9TVEFUVVNFUy5JTl9QUk9HUkVTU19DTE9VRCxcclxuXHRcdEpPQl9TVEFUVVNFUy5PTl9CQUNLX1VQLFxyXG5cdFx0Sk9CX1NUQVRVU0VTLk9OX0hPTEQsXHJcblx0XTtcclxuXHRjb25zdCBqb2JzTm8gPSBDTElFTlRTX1NUQVRFLmNsaWVudHMuZmlsdGVyKChjbGllbnQpID0+IGFjdGl2ZVN0YXR1c2VzLmluY2x1ZGVzKGNsaWVudC5zdGF0dXMpKS5sZW5ndGg7XHJcblxyXG5cdHJldHVybiB7IHRpbWUsIHZhbHVlOiBqb2JzTm8gfTtcclxufTtcclxuXHJcbmNvbnN0IHJlcG9ydEpvYlNpemVEYXRhID0gKHRpbWU6IG51bWJlcikgPT4ge1xyXG5cdGNvbnN0IGFjdGl2ZVN0YXR1c2VzID0gW1xyXG5cdFx0Sk9CX1NUQVRVU0VTLklOX1BST0dSRVNTLFxyXG5cdFx0Sk9CX1NUQVRVU0VTLklOX1BST0dSRVNTX0NMT1VELFxyXG5cdFx0Sk9CX1NUQVRVU0VTLk9OX0JBQ0tfVVAsXHJcblx0XHRKT0JfU1RBVFVTRVMuT05fSE9MRCxcclxuXHRdO1xyXG5cdGNvbnN0IGpvYnNDcHUgPSBDTElFTlRTX1NUQVRFLmNsaWVudHNcclxuXHRcdC5maWx0ZXIoKGNsaWVudCkgPT4gYWN0aXZlU3RhdHVzZXMuaW5jbHVkZXMoY2xpZW50LnN0YXR1cykpXHJcblx0XHQubWFwKChjbGllbnQpID0+IGNsaWVudC5qb2IuY3B1KTtcclxuXHRjb25zdCBqb2JzTWVtb3J5ID0gQ0xJRU5UU19TVEFURS5jbGllbnRzXHJcblx0XHQuZmlsdGVyKChjbGllbnQpID0+IGFjdGl2ZVN0YXR1c2VzLmluY2x1ZGVzKGNsaWVudC5zdGF0dXMpKVxyXG5cdFx0Lm1hcCgoY2xpZW50KSA9PiBjbGllbnQuam9iLm1lbW9yeSk7XHJcblx0Y29uc3Qgam9ic1N0b3JhZ2UgPSBDTElFTlRTX1NUQVRFLmNsaWVudHNcclxuXHRcdC5maWx0ZXIoKGNsaWVudCkgPT4gYWN0aXZlU3RhdHVzZXMuaW5jbHVkZXMoY2xpZW50LnN0YXR1cykpXHJcblx0XHQubWFwKChjbGllbnQpID0+IGNsaWVudC5qb2Iuc3RvcmFnZSk7XHJcblxyXG5cdGNvbnN0IGlzRW1wdHkgPSBqb2JzQ3B1Lmxlbmd0aCA9PT0gMDtcclxuXHRjb25zdCBhdmdDcHUgPSAhaXNFbXB0eSA/IGpvYnNDcHUucmVkdWNlKChzaXplMSwgc2l6ZTIpID0+IHNpemUxICsgc2l6ZTIsIDApIC8gam9ic0NwdS5sZW5ndGggOiAwO1xyXG5cdGNvbnN0IGF2Z01lbW9yeSA9ICFpc0VtcHR5ID8gam9ic01lbW9yeS5yZWR1Y2UoKHNpemUxLCBzaXplMikgPT4gc2l6ZTEgKyBzaXplMiwgMCkgLyBqb2JzTWVtb3J5Lmxlbmd0aCA6IDA7XHJcblx0Y29uc3QgYXZnU3RvcmFnZSA9ICFpc0VtcHR5ID8gam9ic1N0b3JhZ2UucmVkdWNlKChzaXplMSwgc2l6ZTIpID0+IHNpemUxICsgc2l6ZTIsIDApIC8gam9ic1N0b3JhZ2UubGVuZ3RoIDogMDtcclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdHRpbWUsXHJcblx0XHRhdmdDcHUsXHJcblx0XHRhdmdNZW1vcnksXHJcblx0XHRhdmdTdG9yYWdlLFxyXG5cdFx0bWluQ3B1OiBpc0VtcHR5ID8gMCA6IE1hdGgubWluKC4uLmpvYnNDcHUpLFxyXG5cdFx0bWluTWVtb3J5OiBpc0VtcHR5ID8gMCA6IE1hdGgubWluKC4uLmpvYnNNZW1vcnkpLFxyXG5cdFx0bWluU3RvcmFnZTogaXNFbXB0eSA/IDAgOiBNYXRoLm1pbiguLi5qb2JzU3RvcmFnZSksXHJcblx0XHRtYXhDcHU6IGlzRW1wdHkgPyAwIDogTWF0aC5tYXgoLi4uam9ic0NwdSksXHJcblx0XHRtYXhNZW1vcnk6IGlzRW1wdHkgPyAwIDogTWF0aC5tYXgoLi4uam9ic01lbW9yeSksXHJcblx0XHRtYXhTdG9yYWdlOiBpc0VtcHR5ID8gMCA6IE1hdGgubWF4KC4uLmpvYnNTdG9yYWdlKSxcclxuXHR9O1xyXG59O1xyXG5cclxuY29uc3QgcmVwb3J0Sm9iU3RhdHVzRXhlY3V0aW9uVGltZSA9ICgpID0+IHtcclxuXHRjb25zdCBjbGllbnRzTm8gPSBDTElFTlRTX1NUQVRFLmNsaWVudHMubGVuZ3RoO1xyXG5cdGNvbnN0IGNsaWVudHNEdXJhdGlvbk1hcHMgPSBDTElFTlRTX1NUQVRFLmNsaWVudHMubWFwKChjbGllbnQpID0+IGNsaWVudC5kdXJhdGlvbk1hcCk7XHJcblxyXG5cdHJldHVybiBPYmplY3Qua2V5cyhKT0JfU1RBVFVTRVMpLm1hcCgoc3RhdHVzKSA9PiB7XHJcblx0XHRjb25zdCB2YWx1ZSA9XHJcblx0XHRcdGNsaWVudHNEdXJhdGlvbk1hcHNcclxuXHRcdFx0XHQ/Lm1hcCgoZHVyYXRpb25NYXApID0+IChkdXJhdGlvbk1hcCA9PT0gbnVsbCA/IDAgOiBkdXJhdGlvbk1hcFtzdGF0dXNdKSlcclxuXHRcdFx0XHQucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2ICsgY3VyciwgMCkgPz8gMDtcclxuXHRcdHJldHVybiB7IHN0YXR1cywgdmFsdWU6IGNsaWVudHNObyAhPT0gMCA/IHZhbHVlIC8gY2xpZW50c05vIDogMCB9O1xyXG5cdH0pO1xyXG59O1xyXG5cclxuY29uc3QgcmVwb3J0Sm9iRXhlY3V0aW9uUGVyY2VudGFnZXMgPSAoKSA9PiB7XHJcblx0Y29uc3QgY2xpZW50c05vID0gQ0xJRU5UU19TVEFURS5jbGllbnRzLmxlbmd0aDtcclxuXHRjb25zdCBjbGllbnRzUGVyY2VudGFnZXMgPSBDTElFTlRTX1NUQVRFLmNsaWVudHNcclxuXHRcdC5maWx0ZXIoKGNsaWVudCkgPT4gY2xpZW50LnN0YXR1cyA9PT0gSk9CX1NUQVRVU0VTLkZJTklTSEVEKVxyXG5cdFx0Lm1hcCgoY2xpZW50KSA9PiBjbGllbnQuam9iRXhlY3V0aW9uUHJvcG9ydGlvbik7XHJcblxyXG5cdGNvbnN0IGNsaWVudFBlcmNlbnRhZ2VTdW0gPSBjbGllbnRzUGVyY2VudGFnZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2ICsgY3VyciwgMCk7XHJcblx0Y29uc3QgYXZnUGVyY2VudGFnZSA9IChjbGllbnRzTm8gIT09IDAgPyBjbGllbnRQZXJjZW50YWdlU3VtIC8gY2xpZW50c05vIDogMCkgKiAxMDA7XHJcblx0Y29uc3QgbWluUGVyY2VudGFnZSA9IE1hdGgubWluKC4uLmNsaWVudHNQZXJjZW50YWdlcykgKiAxMDA7XHJcblx0Y29uc3QgbWF4UGVyY2VudGFnZSA9IE1hdGgubWF4KC4uLmNsaWVudHNQZXJjZW50YWdlcykgKiAxMDA7XHJcblxyXG5cdHJldHVybiB7IGF2Z1BlcmNlbnRhZ2UsIG1pblBlcmNlbnRhZ2UsIG1heFBlcmNlbnRhZ2UgfTtcclxufTtcclxuXHJcbmNvbnN0IHVwZGF0ZUNsaWVudFJlcG9ydHNTdGF0ZSA9ICh0aW1lKSA9PiB7XHJcblx0Y29uc3Qgam9iU2l6ZURhdGEgPSByZXBvcnRKb2JTaXplRGF0YSh0aW1lKTtcclxuXHRjb25zdCBqb2JQZXJjZW50YWdlcyA9IHJlcG9ydEpvYkV4ZWN1dGlvblBlcmNlbnRhZ2VzKCk7XHJcblxyXG5cdGNvbnN0IGV4ZWN1dGVkSm9ic1JlcG9ydCA9IENMSUVOVFNfUkVQT1JUU19TVEFURS5leGVjdXRlZEpvYnNSZXBvcnQuY29uY2F0KHJlcG9ydEV4ZWN1dGVkSm9iKHRpbWUpKTtcclxuXHRjb25zdCBhdmdDcHVSZXBvcnQgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUuYXZnQ3B1UmVwb3J0LmNvbmNhdCh7XHJcblx0XHR0aW1lOiBqb2JTaXplRGF0YS50aW1lLFxyXG5cdFx0dmFsdWU6IGpvYlNpemVEYXRhLmF2Z0NwdSxcclxuXHR9KTtcclxuXHRjb25zdCBhdmdNZW1vcnlSZXBvcnQgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUuYXZnTWVtb3J5UmVwb3J0LmNvbmNhdCh7XHJcblx0XHR0aW1lOiBqb2JTaXplRGF0YS50aW1lLFxyXG5cdFx0dmFsdWU6IGpvYlNpemVEYXRhLmF2Z01lbW9yeSxcclxuXHR9KTtcclxuXHRjb25zdCBhdmdTdG9yYWdlUmVwb3J0ID0gQ0xJRU5UU19SRVBPUlRTX1NUQVRFLmF2Z1N0b3JhZ2VSZXBvcnQuY29uY2F0KHtcclxuXHRcdHRpbWU6IGpvYlNpemVEYXRhLnRpbWUsXHJcblx0XHR2YWx1ZTogam9iU2l6ZURhdGEuYXZnU3RvcmFnZSxcclxuXHR9KTtcclxuXHRjb25zdCBtaW5DcHVSZXBvcnQgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUubWluQ3B1UmVwb3J0LmNvbmNhdCh7XHJcblx0XHR0aW1lOiBqb2JTaXplRGF0YS50aW1lLFxyXG5cdFx0dmFsdWU6IGpvYlNpemVEYXRhLm1pbkNwdSxcclxuXHR9KTtcclxuXHRjb25zdCBtaW5NZW1vcnlSZXBvcnQgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUubWluTWVtb3J5UmVwb3J0LmNvbmNhdCh7XHJcblx0XHR0aW1lOiBqb2JTaXplRGF0YS50aW1lLFxyXG5cdFx0dmFsdWU6IGpvYlNpemVEYXRhLm1pbk1lbW9yeSxcclxuXHR9KTtcclxuXHRjb25zdCBtaW5TdG9yYWdlUmVwb3J0ID0gQ0xJRU5UU19SRVBPUlRTX1NUQVRFLm1pblN0b3JhZ2VSZXBvcnQuY29uY2F0KHtcclxuXHRcdHRpbWU6IGpvYlNpemVEYXRhLnRpbWUsXHJcblx0XHR2YWx1ZTogam9iU2l6ZURhdGEubWluU3RvcmFnZSxcclxuXHR9KTtcclxuXHRjb25zdCBtYXhDcHVSZXBvcnQgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUubWF4Q3B1UmVwb3J0LmNvbmNhdCh7XHJcblx0XHR0aW1lOiBqb2JTaXplRGF0YS50aW1lLFxyXG5cdFx0dmFsdWU6IGpvYlNpemVEYXRhLm1heENwdSxcclxuXHR9KTtcclxuXHRjb25zdCBtYXhNZW1vcnlSZXBvcnQgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUubWF4TWVtb3J5UmVwb3J0LmNvbmNhdCh7XHJcblx0XHR0aW1lOiBqb2JTaXplRGF0YS50aW1lLFxyXG5cdFx0dmFsdWU6IGpvYlNpemVEYXRhLm1heE1lbW9yeSxcclxuXHR9KTtcclxuXHRjb25zdCBtYXhTdG9yYWdlUmVwb3J0ID0gQ0xJRU5UU19SRVBPUlRTX1NUQVRFLm1heFN0b3JhZ2VSZXBvcnQuY29uY2F0KHtcclxuXHRcdHRpbWU6IGpvYlNpemVEYXRhLnRpbWUsXHJcblx0XHR2YWx1ZTogam9iU2l6ZURhdGEubWF4U3RvcmFnZSxcclxuXHR9KTtcclxuXHRjb25zdCBjbGllbnRzU3RhdHVzUmVwb3J0ID0gQ0xJRU5UU19SRVBPUlRTX1NUQVRFLmNsaWVudHNTdGF0dXNSZXBvcnQuY29uY2F0KHtcclxuXHRcdHRpbWUsXHJcblx0XHR2YWx1ZTogcmVwb3J0Sm9iU3RhdHVzRXhlY3V0aW9uVGltZSgpLFxyXG5cdH0pO1xyXG5cdGNvbnN0IGF2Z0NsaWVudHNFeGVjdXRpb25QZXJjZW50YWdlID0gQ0xJRU5UU19SRVBPUlRTX1NUQVRFLmF2Z0NsaWVudHNFeGVjdXRpb25QZXJjZW50YWdlLmNvbmNhdCh7XHJcblx0XHR0aW1lLFxyXG5cdFx0dmFsdWU6IGpvYlBlcmNlbnRhZ2VzLmF2Z1BlcmNlbnRhZ2UsXHJcblx0fSk7XHJcblx0Y29uc3QgbWluQ2xpZW50c0V4ZWN1dGlvblBlcmNlbnRhZ2UgPSBDTElFTlRTX1JFUE9SVFNfU1RBVEUubWluQ2xpZW50c0V4ZWN1dGlvblBlcmNlbnRhZ2UuY29uY2F0KHtcclxuXHRcdHRpbWUsXHJcblx0XHR2YWx1ZTogam9iUGVyY2VudGFnZXMubWluUGVyY2VudGFnZSxcclxuXHR9KTtcclxuXHRjb25zdCBtYXhDbGllbnRzRXhlY3V0aW9uUGVyY2VudGFnZSA9IENMSUVOVFNfUkVQT1JUU19TVEFURS5tYXhDbGllbnRzRXhlY3V0aW9uUGVyY2VudGFnZS5jb25jYXQoe1xyXG5cdFx0dGltZSxcclxuXHRcdHZhbHVlOiBqb2JQZXJjZW50YWdlcy5tYXhQZXJjZW50YWdlLFxyXG5cdH0pO1xyXG5cclxuXHRPYmplY3QuYXNzaWduKENMSUVOVFNfUkVQT1JUU19TVEFURSwge1xyXG5cdFx0ZXhlY3V0ZWRKb2JzUmVwb3J0LFxyXG5cdFx0YXZnQ3B1UmVwb3J0LFxyXG5cdFx0YXZnTWVtb3J5UmVwb3J0LFxyXG5cdFx0YXZnU3RvcmFnZVJlcG9ydCxcclxuXHRcdG1pbkNwdVJlcG9ydCxcclxuXHRcdG1pbk1lbW9yeVJlcG9ydCxcclxuXHRcdG1pblN0b3JhZ2VSZXBvcnQsXHJcblx0XHRtYXhDcHVSZXBvcnQsXHJcblx0XHRtYXhNZW1vcnlSZXBvcnQsXHJcblx0XHRtYXhTdG9yYWdlUmVwb3J0LFxyXG5cdFx0Y2xpZW50c1N0YXR1c1JlcG9ydCxcclxuXHRcdGF2Z0NsaWVudHNFeGVjdXRpb25QZXJjZW50YWdlLFxyXG5cdFx0bWluQ2xpZW50c0V4ZWN1dGlvblBlcmNlbnRhZ2UsXHJcblx0XHRtYXhDbGllbnRzRXhlY3V0aW9uUGVyY2VudGFnZSxcclxuXHR9KTtcclxufTtcclxuXHJcbmV4cG9ydCB7IHVwZGF0ZUNsaWVudFJlcG9ydHNTdGF0ZSB9O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUF1RSxTQUFBRSxtQkFBQUMsR0FBQSxXQUFBQyxrQkFBQSxDQUFBRCxHQUFBLEtBQUFFLGdCQUFBLENBQUFGLEdBQUEsS0FBQUcsMkJBQUEsQ0FBQUgsR0FBQSxLQUFBSSxrQkFBQTtBQUFBLFNBQUFBLG1CQUFBLGNBQUFDLFNBQUE7QUFBQSxTQUFBRiw0QkFBQUcsQ0FBQSxFQUFBQyxNQUFBLFNBQUFELENBQUEscUJBQUFBLENBQUEsc0JBQUFFLGlCQUFBLENBQUFGLENBQUEsRUFBQUMsTUFBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxDQUFBQyxRQUFBLENBQUFDLElBQUEsQ0FBQVAsQ0FBQSxFQUFBUSxLQUFBLGFBQUFMLENBQUEsaUJBQUFILENBQUEsQ0FBQVMsV0FBQSxFQUFBTixDQUFBLEdBQUFILENBQUEsQ0FBQVMsV0FBQSxDQUFBQyxJQUFBLE1BQUFQLENBQUEsY0FBQUEsQ0FBQSxtQkFBQVEs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