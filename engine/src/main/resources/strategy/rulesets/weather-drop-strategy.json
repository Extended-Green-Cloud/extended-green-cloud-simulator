{
  "name": "WEATHER_DROP_RULE_SET",
  "rules": [
    {
      "agentType": "CENTRAL_MANAGER",
      "type": "LOOK_FOR_JOB_EXECUTOR_HANDLE_FAILURE_RULE",
      "priority": "3",
      "name": "handle cases when there is no RMA for job execution",
      "description": "rule provides common handler for cases when there are no candidates to execute the job",
      "agentRuleType": "BASIC",
      "initialParams": {
        "jobPostponeCounter": "CONCURRENT_MAP"
      },
      "imports": [
        "import org.greencloud.commons.utils.messaging.factory.JobStatusMessageFactory;",
        "import org.greencloud.commons.enums.job.JobExecutionStatusEnum;",
        "import org.jrba.rulesengine.ruleset.RuleSetFacts;",
        "import org.greencloud.commons.enums.rules.EGCSDefaultRuleType;",
        "import org.jrba.rulesengine.behaviour.schedule.ScheduleOnce;",
        "import org.jrba.utils.rules.RuleSetSelector;"
      ],
      "execute": "job = facts.get(\"job\"); jobPostponeCounter.putIfAbsent(job.getJobInstanceId(), 0); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); if ((jobPostponeCounter[job.getJobInstanceId()] < 3) && (agentProps.postponeJobExecution(job, 10))) { logger.info(\"All Regional Manager Agents refused to the call for proposal. Job postponed and scheduled for next execution.\"); jobPostponeCounter[job.getJobInstanceId()] = jobPostponeCounter[job.getJobInstanceId()] + 1; agent.send(JobStatusMessageFactory.preparePostponeJobMessageForClient(job, facts.get(\"rule-set-idx\"))); } else { logger.info(\"All Regional Manager Agents refused to the call for proposal. Scheduling job execution in cloud.\"); agentProps.getClientJobs().replace(job, JobExecutionStatusEnum.PROCESSING, JobExecutionStatusEnum.ACCEPTED); agentNode.announceClientJob(); executionFacts = new RuleSetFacts(facts.get(\"rule-set-idx\")); executionFacts.put(\"job\", job); agent.addBehaviour(ScheduleOnce.create(agent, executionFacts, EGCSDefaultRuleType.START_JOB_EXECUTION_RULE, controller, RuleSetSelector.SELECT_BY_FACTS_IDX)); }"

    },
    {
      "agentType": "CENTRAL_MANAGER",
      "type": "JOB_STATUS_RECEIVER_HANDLER_RULE",
      "subType": "JOB_STATUS_RECEIVER_HANDLE_FAILED_JOB_RULE",
      "priority": "3",
      "name": "handles job update - failed job",
      "description": "rule runs when execution of new client job has failed",
      "agentRuleType": "BASIC",
      "imports": [
        "import org.greencloud.commons.utils.job.JobUtils;",
        "import org.greencloud.commons.utils.messaging.factory.JobStatusMessageFactory;",
        "import org.greencloud.commons.utils.messaging.constants.MessageConversationConstants;",
        "import org.jrba.rulesengine.ruleset.RuleSetFacts;",
        "import org.greencloud.commons.enums.rules.EGCSDefaultRuleType;",
        "import org.jrba.rulesengine.behaviour.schedule.ScheduleOnce;",
        "import org.jrba.utils.rules.RuleSetSelector;"
      ],
      "execute": "jobOptional = facts.get(\"job\"); if (jobOptional.isPresent()) { job = jobOptional.get(); jobStatusUpdate = facts.get(\"message-content\"); agentProps.getRmaForJobMap().remove(job.getJobId()); MDC.put(LoggingConstants.MDC_JOB_ID, jobStatusUpdate.getJobInstance().getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); if (JobUtils.isJobStarted(agentProps.getClientJobs().get(job))) { logger.info(\"Execution of the job {} has failed after its start. Passing information to Client.\", job.getJobId()); ruleSetIdx = agentProps.removeJob(job); controller.removeRuleSet(agentProps.getRuleSetForJob(), ruleSetIdx); agent.send(JobStatusMessageFactory.prepareJobStatusMessageForClient(job, jobStatusUpdate, MessageConversationConstants.FAILED_JOB_ID, facts.get(\"rule-set-idx\"))); } else { logger.info(\"Execution of the job {} has failed before its start. Moving execution to central cloud.\", job.getJobId()); agentNode.announceClientJob(); executionFacts = new RuleSetFacts(facts.get(\"rule-set-idx\")); executionFacts.put(\"job\", job); agent.addBehaviour(ScheduleOnce.create(agent, executionFacts, EGCSDefaultRuleType.START_JOB_EXECUTION_RULE, controller, RuleSetSelector.SELECT_BY_FACTS_IDX)); }}",
      "evaluate": "type = facts.get(\"message-type\"); return type.equals(MessageConversationConstants.FAILED_JOB_ID);"
    },
    {
      "agentType": "CENTRAL_MANAGER",
      "type": "FINISH_JOB_EXECUTION_RULE",
      "name": "finish of job execution in central cloud",
      "description": "rule initiates finish of Job execution in the central cloud",
      "agentRuleType": "SCHEDULED",
      "imports": [
        "import org.greencloud.commons.utils.time.TimeSimulation;",
        "import java.util.Date;",
        "import org.greencloud.commons.utils.messaging.factory.JobStatusMessageFactory;",
        "import org.greencloud.commons.utils.messaging.constants.MessageConversationConstants;",
        "import org.jrba.rulesengine.ruleset.RuleSetFacts;"
      ],
      "specifyTime": "job = facts.get(\"job\"); endDate = TimeSimulation.getCurrentTime().isAfter(job.getEndTime()) ? TimeSimulation.getCurrentTime() : job.getEndTime(); return Date.from(endDate);",
      "handleActionTrigger": "job = facts.get(\"job\"); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); logger.info(\"Client job {} execution has finished in cloud.\", job.getJobId()); agentNode.addFinishedInCloudJob(); agentNode.removePlannedJob(); ruleSetIdx = agentProps.removeJob(job); controller.removeRuleSet(agentProps.getRuleSetForJob(), ruleSetIdx); agent.send(JobStatusMessageFactory.prepareJobStatusMessageForClient(job, MessageConversationConstants.FINISH_JOB_ID, facts.get(\"rule-set-idx\")));"

    },
    {
      "agentType": "CENTRAL_MANAGER",
      "type": "START_JOB_EXECUTION_RULE",
      "name": "start of job execution in central cloud",
      "description": "rule initiates start of Job execution in the central cloud",
      "agentRuleType": "SCHEDULED",
      "imports": [
        "import org.greencloud.commons.utils.time.TimeSimulation;",
        "import org.greencloud.commons.enums.job.JobExecutionStatusEnum;",
        "import java.util.Date;",
        "import org.greencloud.commons.utils.messaging.factory.JobStatusMessageFactory;",
        "import org.jrba.rulesengine.behaviour.schedule.ScheduleOnce;",
        "import org.greencloud.commons.utils.messaging.constants.MessageConversationConstants;",
        "import org.jrba.rulesengine.ruleset.RuleSetFacts;",
        "import org.greencloud.commons.enums.rules.EGCSDefaultRuleType;",
        "import org.jrba.utils.rules.RuleSetSelector;"
      ],
      "specifyTime": "job = facts.get(\"job\"); startDate = TimeSimulation.getCurrentTime().isAfter(job.getStartTime()) ? TimeSimulation.getCurrentTime() : job.getStartTime(); return Date.from(startDate);",
      "handleActionTrigger": "job = facts.get(\"job\"); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); if (JobExecutionStatusEnum.PLANNED_JOB_STATUSES.contains(agentProps.getClientJobs().getOrDefault(job, JobExecutionStatusEnum.ACCEPTED))) { logger.info(\"Start execution of the job {} in cloud.\", job.getJobId()); agentNode.addStartedInCloudJob(); executionFacts = new RuleSetFacts(facts.get(\"rule-set-idx\")); executionFacts.put(\"job\", job); agent.addBehaviour(ScheduleOnce.create(agent, executionFacts, EGCSDefaultRuleType.FINISH_JOB_EXECUTION_RULE, controller, RuleSetSelector.SELECT_BY_FACTS_IDX)); agentProps.getClientJobs().replace(job, JobExecutionStatusEnum.ACCEPTED, JobExecutionStatusEnum.IN_PROGRESS_CLOUD); agent.send(JobStatusMessageFactory.prepareJobStatusMessageForClient(job, MessageConversationConstants.STARTED_IN_CLOUD_ID, facts.get(\"rule-set-idx\"))); } else { logger.info(\"The execution of specific job {} instance has already started\", job.getJobId()); }"

    },
    {
      "agentType": "SERVER",
      "type": "PROCESS_FINISH_JOB_EXECUTION_RULE",
      "name": "processing finish of the job execution in Server",
      "description": "rule handles finish of the Job execution in given Server",
      "agentRuleType": "BASIC",
      "imports": [
        "import org.greencloud.commons.utils.messaging.factory.JobStatusMessageFactory;",
        "import org.greencloud.commons.mapper.JobMapper;",
        "import org.greencloud.commons.utils.job.JobUtils;",
        "import org.greencloud.commons.enums.job.JobExecutionStatusEnum;",
        "import org.greencloud.commons.enums.job.JobExecutionResultEnum;"
      ],
      "execute": "job = facts.get(\"job\"); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); agent.send(JobStatusMessageFactory.prepareJobFinishMessage(job, facts.get(\"rule-set-idx\"), agentProps.getOwnerRegionalManagerAgent())); jobInstance = JobMapper.mapClientJobToJobInstanceId(job); if (JobUtils.isJobStarted(job, agentProps.getServerJobs())) { agentProps.incrementJobCounter(jobInstance, JobExecutionResultEnum.FINISH); } agentNode.updateClientNumber(JobUtils.getJobCount(agentProps.getServerJobs(), JobExecutionStatusEnum.ACCEPTED_JOB_STATUSES)); agentProps.removeJob(job); if (agentProps.isDisabled() && agentProps.getServerJobs().size() == 0) { logger.info(\"Server completed all planned jobs and is fully disabled.\"); agentNode.disableServer(); } agentProps.updateGUI();"

    },
    {
      "agentType": "SERVER",
      "type": "PROCESS_START_JOB_EXECUTION_RULE",
      "name": "processing start job execution in Server",
      "description": "rule handles start of Job execution in given Server",
      "agentRuleType": "BASIC",
      "imports": [
        "import org.greencloud.commons.utils.messaging.factory.JobStatusMessageFactory;",
        "import org.greencloud.commons.mapper.JobMapper;",
        "import org.greencloud.commons.utils.job.JobUtils;",
        "import org.greencloud.commons.enums.job.JobExecutionResultEnum;",
        "import org.greencloud.commons.enums.job.JobExecutionStateEnum;",
        "import org.jrba.rulesengine.behaviour.schedule.ScheduleOnce;",
        "import org.greencloud.commons.enums.rules.EGCSDefaultRuleType;",
        "import org.jrba.utils.rules.RuleSetSelector;"
      ],
      "execute": "job = facts.get(\"job\"); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); logger.info(\"Start executing the job {}.\", job.getJobId()); currentStatus = agentProps.getServerJobs().get(job); jobInstance = JobMapper.mapClientJobToJobInstanceId(job); JobExecutionStateEnum.replaceStatusToActive(agentProps.getServerJobs(), job); agent.send(JobStatusMessageFactory.prepareJobStartedMessage(job, facts.get(\"rule-set-idx\"), agentProps.getOwnerRegionalManagerAgent())); agent.send(JobStatusMessageFactory.prepareJobStatusMessageForRMA(jobInstance, JobUtils.getMessageConversationId(currentStatus), agentProps, facts.get(\"rule-set-idx\"))); agentProps.incrementJobCounter(JobMapper.mapToJobInstanceId(job), JobExecutionResultEnum.STARTED); agent.addBehaviour(ScheduleOnce.create(agent, facts, EGCSDefaultRuleType.FINISH_JOB_EXECUTION_RULE, controller, RuleSetSelector.SELECT_BY_FACTS_IDX));"

    },
    {
      "agentType": "SERVER",
      "type": "COMPUTE_PRICE_RULE",
      "name": "rule computing job price",
      "description": "rule executed when overall job price is to be computed",
      "agentRuleType": "BASIC",
      "imports": [
        "import org.jrba.rulesengine.constants.FactTypeConstants;",
        "import org.greencloud.commons.utils.time.TimeConverter;"
      ],
      "execute": "job = facts.get(\"job\"); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); logger.info(\"Computing price for the job execution. The price has been lowered due to the usage unavailability of green energy.\", job.getJobId()); facts.put(\"PRICE_RESULT\", TimeConverter.convertToHourDuration(job.getStartTime(), job.getEndTime()) * (agentProps.getPricePerHour()/2));"

    },
    {
      "agentType": "SERVER",
      "type": "PROPOSE_TO_EXECUTE_JOB_RULE",
      "name": "propose job execution to RMA",
      "description": "rule sends proposal message to RMA and handles the response",
      "agentRuleType": "PROPOSAL",
      "imports": [
        "import org.jrba.rulesengine.ruleset.RuleSetFacts;",
        "import org.greencloud.commons.enums.rules.EGCSDefaultRuleType;",
        "import org.jrba.rulesengine.constants.FactTypeConstants;",
        "import org.greencloud.commons.utils.messaging.factory.OfferMessageFactory;",
        "import org.jrba.utils.messages.MessageReader;",
        "import org.greencloud.commons.domain.job.extended.JobWithProtocol;",
        "import java.lang.Class;",
        "import org.greencloud.commons.utils.job.JobUtils;",
        "import java.util.Objects;",
        "import org.greencloud.commons.domain.job.extended.ImmutableJobWithStatus;",
        "import org.greencloud.commons.enums.job.JobExecutionResultEnum;",
        "import org.greencloud.commons.utils.messaging.factory.ReplyMessageFactory;",
        "import org.greencloud.commons.utils.messaging.constants.MessageProtocolConstants;",
        "import org.greencloud.commons.utils.messaging.constants.MessageConversationConstants;",
        "import org.greencloud.commons.enums.job.JobExecutionStatusEnum;",
        "import org.jrba.rulesengine.behaviour.schedule.ScheduleOnce;",
        "import org.greencloud.commons.utils.messaging.factory.JobStatusMessageFactory;",
        "import org.greencloud.commons.domain.job.instance.JobInstanceIdentifier;",
        "import org.jrba.utils.rules.RuleSetSelector;",
        "import org.greencloud.commons.utils.resources.ResourcesUtilization;",
        "import org.greencloud.commons.enums.energy.EnergyTypeEnum;"
      ],
      "createProposalMessage": "job = facts.get(\"job\"); priceFacts = new RuleSetFacts(facts.get(FactTypeConstants.RULE_SET_IDX)); priceFacts.put(FactTypeConstants.RULE_TYPE, EGCSDefaultRuleType.COMPUTE_PRICE_RULE); priceFacts.put(\"job\", job); controller.fire(priceFacts); return OfferMessageFactory.prepareServerJobOffer(agentProps, priceFacts.get(\"PRICE_RESULT\"), job.getJobId(), facts.get(FactTypeConstants.ORIGINAL_MESSAGE), facts.get(FactTypeConstants.RULE_SET_IDX), EnergyTypeEnum.BACK_UP_POWER);",
      "handleAcceptProposal": "jobWithProtocol = MessageReader.readMessageContent(acceptMessage, Class.forName(\"org.greencloud.commons.domain.job.extended.JobWithProtocol\")); jobInstance = jobWithProtocol.getJobInstanceIdentifier(); job = JobUtils.getJobByInstanceId(jobInstance.getJobInstanceId(), agentProps.getServerJobs()); if (Objects.nonNull(job)) { availableResources = agentProps.getAvailableResources(job, null, null); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); if (!ResourcesUtilization.areSufficient(availableResources, job.getRequiredResources())) { jobStatusUpdate = new ImmutableJobWithStatus(jobInstance, getCurrentTime()); logger.info(\"Not enough resources to execute the job {}.\", job.getJobId()); agentProps.removeJob(job); agentProps.incrementJobCounter(jobInstance, JobExecutionResultEnum.FAILED); agent.send(ReplyMessageFactory.prepareFailureReply(acceptMessage, jobStatusUpdate, MessageProtocolConstants.FAILED_JOB_PROTOCOL)); } else { logger.info(\"Scheduling the execution of the job {} on back-up power\", jobInstance.getJobId()); agentProps.getServerJobs().replace(job, JobExecutionStatusEnum.IN_PROGRESS_BACKUP_ENERGY_PLANNED); agentNode.updateClientNumber(JobUtils.getJobCount(agentProps.getServerJobs(), JobExecutionStatusEnum.ACCEPTED_JOB_STATUSES)); logger.info(\"Announcing new job {} in network!\", jobInstance.getJobId()); agentNode.announceClientJob(); agent.send(JobStatusMessageFactory.prepareJobStatusMessageForRMA(jobInstance, MessageConversationConstants.CONFIRMED_JOB_ID, agentProps, facts.get(\"rule-set-idx\"))); startFacts = new RuleSetFacts(facts.get(\"rule-set-idx\")); startFacts.put(\"job\", job); agent.addBehaviour(ScheduleOnce.create(agent, startFacts, EGCSDefaultRuleType.START_JOB_EXECUTION_RULE, controller, RuleSetSelector.SELECT_BY_FACTS_IDX)); }}",
      "handleRejectProposal": "jobInstance = MessageReader.readMessageContent(rejectMessage, Class.forName(\"org.greencloud.commons.domain.job.instance.JobInstanceIdentifier\")); job = JobUtils.getJobByInstanceId(jobInstance.getJobInstanceId(), agentProps.getServerJobs()); if (Objects.nonNull(job)) { logger.info(\"Regional Manager {} rejected the job volunteering offer\", rejectMessage.getSender().getLocalName()); agentProps.removeJob(job); }"
    },
    {
      "agentType": "SERVER",
      "type": "NEW_JOB_RECEIVER_HANDLER_RULE",
      "name": "handles new RMA job request",
      "description": "handling new job sent by RMA",
      "agentRuleType": "BASIC",
      "imports": [
        "import org.greencloud.commons.utils.messaging.factory.ReplyMessageFactory;",
        "import org.greencloud.commons.enums.job.JobExecutionStatusEnum;",
        "import org.jrba.rulesengine.ruleset.RuleSetFacts;",
        "import org.greencloud.commons.enums.rules.EGCSDefaultRuleType;",
        "import org.jrba.rulesengine.behaviour.initiate.InitiateProposal;",
        "import org.greencloud.commons.utils.resources.ResourcesUtilization;"
      ],
      "execute": "job = facts.get(\"message-content\"); MDC.put(LoggingConstants.MDC_JOB_ID, job.getJobId()); MDC.put(LoggingConstants.MDC_RULE_SET_ID, LoggingConstants.getIdxFromFacts.apply(facts)); resources = agentProps.getAvailableResources(job, null, null); if ((!ResourcesUtilization.areSufficient(resources, job.getRequiredResources())) || (!agentProps.canTakeIntoProcessing()) || (agentProps.isHasError())) { message = facts.get(\"message\"); logger.info(\"Not enough available resources! Sending refuse message to Regional Manager Agent\"); agent.send(ReplyMessageFactory.prepareRefuseReply(message)); } else { agentProps.addJob(job, facts.get(\"rule-set-idx\"), JobExecutionStatusEnum.PROCESSING); agentProps.takeJobIntoProcessing(); proposalFacts = new RuleSetFacts(facts.get(\"rule-set-idx\")); proposalFacts.put(\"job\", job); proposalFacts.put(\"original-message\", facts.get(\"message\")); agent.addBehaviour(InitiateProposal.create(agent, proposalFacts, EGCSDefaultRuleType.PROPOSE_TO_EXECUTE_JOB_RULE, controller)); }"

    }
  ]
}
